[{"votes": "585", "answers": [{"answer_content": "An import is required, import scipy.io...\nimport scipy.io\nmat = scipy.io.loadmat('file.mat')", "answer_comment": ["scipy does not support v7.3 mat-files (see notes here). See the answer by vikrantt for solution.", "however, you can save mat-files as earlier versions. see: mathworks.com/help/matlab/import_export/mat-file-versions.html (header: 'Save to Nondefault MAT-File Version')", "e.g. save('myfile.mat','-v7')", "Updated link to the SciPy.io tutorial docs.scipy.org/doc/scipy/tutorial/io.html @FranckDernoncourt"], "answer_score": "807", "answer_code_list": ["import scipy.io\nmat = scipy.io.loadmat('file.mat')\n"], "is_accepted": true}, {"answer_content": "Neither scipy.io.savemat, nor scipy.io.loadmat work for MATLAB arrays version 7.3. But the good part is that MATLAB version 7.3 files are hdf5 datasets. So they can be read using a number of tools, including NumPy.\nFor Python, you will need the h5py extension, which requires HDF5 on your system.\nimport numpy as np\nimport h5py\nf = h5py.File('somefile.mat','r')\ndata = f.get('data/variable1')\ndata = np.array(data) # For converting to a NumPy array", "answer_comment": ["This works fine, if you use the '-v7.3' flag in Matlab when saving out your data.  Using the default save (at least in Matlab R2014b) results in a file that cannot be read using the technique above.  If you do use the '-v7.3' flag, the numeric data can be read just fine.", "Yes, that's what I said in my post. You need to use -v7.3 while saving in Matlab. You should do that anyways as it uses a better/more supported/standardized format.", "Could you please explain what is the relation between f and data in your example? How can I move f to a numpy array?", "How would i even know that it contains data under data/variable1 ??", "@devSpartan f.keys() will show you what you can access"], "answer_score": "228", "answer_code_list": ["import numpy as np\nimport h5py\nf = h5py.File('somefile.mat','r')\ndata = f.get('data/variable1')\ndata = np.array(data) # For converting to a NumPy array\n"], "is_accepted": false}, {"answer_content": "First save the .mat file as:\nsave('test.mat', '-v7')\n\nAfter that, in Python, use the usual loadmat function:\nimport scipy.io as sio\ntest = sio.loadmat('test.mat')", "answer_comment": [], "answer_score": "33", "answer_code_list": ["save('test.mat', '-v7')\n", "import scipy.io as sio\ntest = sio.loadmat('test.mat')\n"], "is_accepted": false}, {"answer_content": "There is a nice package called mat4py which can easily be installed using\npip install mat4py\n\nIt is straightforward to use (from the website):\nLoad data from a MAT-file\nThe function loadmat loads all variables stored in the MAT-file into a simple Python data structure, using only Python\u2019s dict and list objects. Numeric and cell arrays are converted to row-ordered nested lists. Arrays are squeezed to eliminate arrays with only one element. The resulting data structure is composed of simple types that are compatible with the JSON format.\nExample: Load a MAT-file into a Python data structure:\nfrom mat4py import loadmat\n\ndata = loadmat('datafile.mat')\n\nThe variable data is a dict with the variables and values contained in the MAT-file.\nSave a Python data structure to a MAT-file\nPython data can be saved to a MAT-file, with the function savemat. Data has to be structured in the same way as for loadmat, i.e. it should be composed of simple data types, like dict, list, str, int, and float.\nExample: Save a Python data structure to a MAT-file:\nfrom mat4py import savemat\n\nsavemat('datafile.mat', data)\n\nThe parameter data shall be a dict with the variables.", "answer_comment": ["Note that mat4py gives you a json-like tree of dicts, lists, lists of lists ... -- no numpy at all. (mat4py/cmd.py my.mat writes my.json, 1 long line.)", "@denis: Yes, that's also stated above. But a good point indeed: I usually like this structure, e.g. in web applications as numpy arrays are not JSON serializable.", "Encountered: mat4py.loadmat.ParseError: Can only read from Matlab level 5 MAT-files", "@s2t2: never ran into this issue before. What matlab version and which scipy version are you using?", "good solution for fallback if scipy is not available (for example on Rasperry Pi). its also faster with pure number data but slower if there are strings"], "answer_score": "27", "answer_code_list": ["pip install mat4py\n", "from mat4py import loadmat\n\ndata = loadmat('datafile.mat')\n", "from mat4py import savemat\n\nsavemat('datafile.mat', data)\n"], "is_accepted": false}, {"answer_content": "There is a great library for this task called: pymatreader.\nJust do as follows:\n\nInstall the package: pip install pymatreader\n\nImport the relevant function of this package: from pymatreader import read_mat\n\nUse the function to read the matlab struct: data = read_mat('matlab_struct.mat')\n\nuse data.keys() to locate where the data is actually stored.\n\n\n\nThe keys will usually look like: dict_keys(['__header__', '__version__', '__globals__', 'data_opp']). Where data_opp will be the actual key which stores the data. The name of this key can ofcourse be changed between different files.\n\n\nLast step - Create your dataframe: my_df = pd.DataFrame(data['data_opp'])\n\nThat's it :)", "answer_comment": ["The 2 things that it did better are: it preserve the mat object dimension and the loaded object was in NumPy array. Thanks", "This one worked out of the box very nicely for me too :) . All the other methods were failing to get the arrays in the right dimensions, and / or missing metadata, and / or were very boilerplate and verbose (the \"open h5 file by hand\" one)."], "answer_score": "19", "answer_code_list": [], "is_accepted": false}, {"answer_content": "Having MATLAB 2014b or newer installed, the MATLAB engine for Python could be used:\nimport matlab.engine\neng = matlab.engine.start_matlab()\ncontent = eng.load(\"example.mat\", nargout=1)", "answer_comment": ["I got this error: ModuleNotFoundError: No module named 'pylab'.", "You got the error when trying this answers? That is odd, it does not use pylab.", "For the record, this answer requires a valid Matlab installation and license - it runs Matlab in the background to accomplish the read. And there may be limitations on what format you get the items in that need further work to make them readable. For example, Simulink.Bus objects come in as a \"matlab object\" and must be processed further, with issues if you want to extract the Bus Element objects."], "answer_score": "17", "answer_code_list": ["import matlab.engine\neng = matlab.engine.start_matlab()\ncontent = eng.load(\"example.mat\", nargout=1)\n"], "is_accepted": false}, {"answer_content": "Reading the file\nimport scipy.io\nmat = scipy.io.loadmat(file_name)\n\nInspecting the type of MAT variable\nprint(type(mat))\n#OUTPUT - <class 'dict'>\n\nThe keys inside the dictionary are MATLAB variables, and the values are the objects assigned to those variables.", "answer_comment": ["I am getting the error \"ValueError: Unknown mat file type, version 9, 99\". Any idea how to solve this?"], "answer_score": "15", "answer_code_list": ["import scipy.io\nmat = scipy.io.loadmat(file_name)\n", "print(type(mat))\n#OUTPUT - <class 'dict'>\n"], "is_accepted": false}, {"answer_content": "To read mat file to pandas dataFrame with mixed data types\nimport scipy.io as sio\nmat=sio.loadmat('file.mat')# load mat-file\nmdata = mat['myVar']  # variable in mat file \nndata = {n: mdata[n][0,0] for n in mdata.dtype.names}\nColumns = [n for n, v in ndata.items() if v.size == 1]\nd=dict((c, ndata[c][0]) for c in Columns)\ndf=pd.DataFrame.from_dict(d)\ndisplay(df)", "answer_comment": [], "answer_score": "11", "answer_code_list": ["import scipy.io as sio\nmat=sio.loadmat('file.mat')# load mat-file\nmdata = mat['myVar']  # variable in mat file \nndata = {n: mdata[n][0,0] for n in mdata.dtype.names}\nColumns = [n for n, v in ndata.items() if v.size == 1]\nd=dict((c, ndata[c][0]) for c in Columns)\ndf=pd.DataFrame.from_dict(d)\ndisplay(df)\n"], "is_accepted": false}, {"answer_content": "There is also the MATLAB Engine for Python by MathWorks itself. If you have MATLAB, this might be worth considering (I haven't tried it myself but it has a lot more functionality than just reading MATLAB files). However, I don't know if it is allowed to distribute it to other users (it is probably not a problem if those persons have MATLAB. Otherwise, maybe NumPy is the right way to go?).\nAlso, if you want to do all the basics yourself, MathWorks provides (if the link changes, try to google for matfile_format.pdf or its title MAT-FILE Format) a detailed documentation on the structure of the file format. It's not as complicated as I personally thought, but obviously, this is not the easiest way to go. It also depends on how many features of the .mat-files you want to support.\nI've written a \"small\" (about 700 lines) Python script which can read some basic .mat-files. I'm neither a Python expert nor a beginner and it took me about two days to write it (using the MathWorks documentation linked above). I've learned a lot of new stuff and it was quite fun (most of the time). As I've written the Python script at work, I'm afraid I cannot publish it... But I can give some advice here:\n\nFirst read the documentation.\nUse a hex editor (such as HxD) and look into a reference .mat-file you want to parse.\nTry to figure out the meaning of each byte by saving the bytes to a .txt file and annotate each line.\nUse classes to save each data element (such as miCOMPRESSED, miMATRIX, mxDOUBLE, or miINT32)\nThe .mat-files' structure is optimal for saving the data elements in a tree data structure; each node has one class and subnodes", "answer_comment": ["That's a somehow crazy documentation provided by mathworks. 40 pages explaining the format, without mentioning that it is a subset of HDF5.", "It is not there any more", "@Mour_Ka the linked PDF still opens for me.", "sorry I meant the Matlab Engine for Python. Here is the new link if I am not mistaken de.mathworks.com/help/matlab/matlab-engine-for-python.html."], "answer_score": "10", "answer_code_list": [], "is_accepted": false}, {"answer_content": "Apart from scipy.io.loadmat for v4 (Level 1.0), v6, v7 to 7.2 matfiles and  h5py.File for 7.3 format matfiles, there is anther type of matfiles in text data format instead of binary, usually created by Octave, which can't even be read in MATLAB.\nBoth of scipy.io.loadmat and h5py.File can't load them (tested on scipy 1.5.3 and h5py 3.1.0), and the only solution I found is numpy.loadtxt.\nimport numpy as np\nmat = np.loadtxt('xxx.mat')", "answer_comment": ["At least for .mat files generated with MATLAB, this will result in a UnicodeDecodeError.", "@emilaz This is expected. np.loadtxt is only meant for .mat files generated by Octave.", "Yes, I just put it there as clarification for future people looking at this :)"], "answer_score": "5", "answer_code_list": ["import numpy as np\nmat = np.loadtxt('xxx.mat')\n"], "is_accepted": false}, {"answer_content": "Install scipy\npip install scipy\n\nImport the scipy.io.loadmat module\n\n\n     from scipy.io import loadmat\n      annots = loadmat('annotation_0001.mat')\n      print(annots)\n\n\nParse the .mat file structure\n\n   con_list = [[element for element in upperElement] for upperElement in annots['obj_contour']]\n\n\nUse Pandas dataframes to work with the data\n\nimport pandas as pd\n   newData = list(zip(con_list[0], con_list[1]))\n   columns = ['obj_contour_x', 'obj_contour_y']\n   df = pd.DataFrame(newData, columns=columns)\n\nrefrence:\nhttps://www.askpython.com/python/examples/mat-files-in-python", "answer_comment": ["This is already well covered in the accepted answer, and others. Please don't repeat answers."], "answer_score": "3", "answer_code_list": ["     from scipy.io import loadmat\n      annots = loadmat('annotation_0001.mat')\n      print(annots)\n", "   con_list = [[element for element in upperElement] for upperElement in annots['obj_contour']]\n", "import pandas as pd\n   newData = list(zip(con_list[0], con_list[1]))\n   columns = ['obj_contour_x', 'obj_contour_y']\n   df = pd.DataFrame(newData, columns=columns)\n"], "is_accepted": false}, {"answer_content": "Can also use the hdf5storage library. official documentation here for details on matlab version support.\nimport hdf5storage\n\nlabel_file = \"./LabelTrain.mat\"\nout = hdf5storage.loadmat(label_file) \n\nprint(type(out)) # <class 'dict'>", "answer_comment": ["hdf5storage uses scipy in the background"], "answer_score": "2", "answer_code_list": ["import hdf5storage\n\nlabel_file = \"./LabelTrain.mat\"\nout = hdf5storage.loadmat(label_file) \n\nprint(type(out)) # <class 'dict'>\n"], "is_accepted": false}, {"answer_content": "from os.path import dirname, join as pjoin\nimport scipy.io as sio\ndata_dir = pjoin(dirname(sio.__file__), 'matlab', 'tests', 'data')\nmat_fname = pjoin(data_dir, 'testdouble_7.4_GLNX86.mat')\nmat_contents = sio.loadmat(mat_fname)\n\nYou can use above code to read the default saved .mat file in Python.", "answer_comment": [], "answer_score": "1", "answer_code_list": ["from os.path import dirname, join as pjoin\nimport scipy.io as sio\ndata_dir = pjoin(dirname(sio.__file__), 'matlab', 'tests', 'data')\nmat_fname = pjoin(data_dir, 'testdouble_7.4_GLNX86.mat')\nmat_contents = sio.loadmat(mat_fname)\n"], "is_accepted": false}, {"answer_content": "After struggling with this problem myself and trying other libraries (I have to say mat4py is a good one as well but with a few limitations) I have built this library (\"matdata2py\") that can handle most variable types and most importantly for me the \"string\" type. The .mat file needs to be saved in the -V7.3 version. I hope this can be useful for the community.\nInstallation:\npip install matdata2py\n\nHow to use this lib:\nimport matdata2py as mtp\n\nTo load the Matlab data file:\nVariables_output = mtp.loadmatfile(file_Name, StructsExportLikeMatlab = True, ExportVar2PyEnv = False)\nprint(Variables_output.keys()) # with ExportVar2PyEnv = False the variables are as elements of the Variables_output dictionary. \n\nwith ExportVar2PyEnv = True you can see each variable separately as python variables with the same name as saved in the Mat file.\nFlag descriptions\nStructsExportLikeMatlab = True/False structures are exported in dictionary format (False) or dot-based format similar to Matlab (True)\nExportVar2PyEnv = True/False export all variables in a single dictionary (True) or as separate individual variables into the python environment (False)", "answer_comment": [], "answer_score": "1", "answer_code_list": ["pip install matdata2py\n", "import matdata2py as mtp\n", "Variables_output = mtp.loadmatfile(file_Name, StructsExportLikeMatlab = True, ExportVar2PyEnv = False)\nprint(Variables_output.keys()) # with ExportVar2PyEnv = False the variables are as elements of the Variables_output dictionary. \n"], "is_accepted": false}, {"answer_content": "scipy will work perfectly to load the .mat files.\nAnd we can use the get() function to convert it to a numpy array.\nmat = scipy.io.loadmat('point05m_matrix.mat')\n\nx = mat.get(\"matrix\")\nprint(type(x))\nprint(len(x))\n\nplt.imshow(x, extent=[0,60,0,55], aspect='auto')\nplt.show()", "answer_comment": [], "answer_score": "0", "answer_code_list": ["mat = scipy.io.loadmat('point05m_matrix.mat')\n\nx = mat.get(\"matrix\")\nprint(type(x))\nprint(len(x))\n\nplt.imshow(x, extent=[0,60,0,55], aspect='auto')\nplt.show()\n"], "is_accepted": false}, {"answer_content": "To Upload and Read mat files in python\n\nInstall mat4py in python.On successful installation we get:\nSuccessfully installed mat4py-0.5.0.\nImporting loadmat from mat4py.\nSave file actual location inside a variable.\nLoad mat file format to a data value using python\npip install mat4py\nfrom mat4py import loadmat\nboston = r\"E:\\Downloads\\boston.mat\"\ndata = loadmat(boston, meta=False)", "answer_comment": [], "answer_score": "0", "answer_code_list": [], "is_accepted": false}], "views": "799k", "title": "Read .mat files in Python", "question_link": "https://stackoverflow.com/questions/874461/read-mat-files-in-python", "question_content": "Is it possible to read binary MATLAB .mat files in Python?\nI've seen that SciPy has alleged support for reading .mat files, but I'm unsuccessful with it. I installed SciPy version 0.7.0, and I can't find the loadmat() method.", "question_comment": []}]