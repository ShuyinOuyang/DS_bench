[{"votes": "1677", "answers": [{"answer_content": "There are a number of ways to do what you want.  To add to what Christian Alis and Navi already said, you can use the bbox_to_anchor keyword argument to place the legend partially outside the axes and/or decrease the font size.\nBefore you consider decreasing the font size (which can make things awfully hard to read), try playing around with placing the legend in different places:\nSo, let's start with a generic example:\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend()\n\nplt.show()\n\n\nIf we do the same thing, but use the bbox_to_anchor keyword argument we can shift the legend slightly outside the axes boundaries:\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend(bbox_to_anchor=(1.1, 1.05))\n\nplt.show()\n\n\nSimilarly, make the legend more horizontal and/or put it at the top of the figure (I'm also turning on rounded corners and a simple drop shadow):\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),\n          ncol=3, fancybox=True, shadow=True)\nplt.show()\n\n\nAlternatively, shrink the current plot's width, and put the legend entirely outside the axis of the figure (note: if you use tight_layout(), then leave out ax.set_position():\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis by 20%\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n# Put a legend to the right of the current axis\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.show()\n\n\nAnd in a similar manner, shrink the plot vertically, and put a horizontal legend at the bottom:\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis's height by 10% on the bottom\nbox = ax.get_position()\nax.set_position([box.x0, box.y0 + box.height * 0.1,\n                 box.width, box.height * 0.9])\n\n# Put a legend below current axis\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)\n\nplt.show()\n\n\nHave a look at the matplotlib legend guide. You might also take a look at plt.figlegend().", "answer_comment": [], "answer_score": "2459", "answer_code_list": ["import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend()\n\nplt.show()\n", "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend(bbox_to_anchor=(1.1, 1.05))\n\nplt.show()\n", "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),\n          ncol=3, fancybox=True, shadow=True)\nplt.show()\n", "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis by 20%\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n# Put a legend to the right of the current axis\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.show()\n", "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in range(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis's height by 10% on the bottom\nbox = ax.get_position()\nax.set_position([box.x0, box.y0 + box.height * 0.1,\n                 box.width, box.height * 0.9])\n\n# Put a legend below current axis\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)\n\nplt.show()\n"], "is_accepted": false}, {"answer_content": "Placing the legend (bbox_to_anchor)\nA legend is positioned inside the bounding box of the axes using the loc argument to plt.legend. \nE.g., loc=\"upper right\" places the legend in the upper right corner of the bounding box, which by default extents from (0, 0) to (1, 1) in axes coordinates (or in bounding box notation (x0, y0, width, height) = (0, 0, 1, 1)).\nTo place the legend outside of the axes bounding box, one may specify a tuple (x0, y0) of axes coordinates of the lower left corner of the legend.\nplt.legend(loc=(1.04, 0))\n\nA more versatile approach is to manually specify the bounding box into which the legend should be placed, using the bbox_to_anchor argument. One can restrict oneself to supply only the (x0, y0) part of the bbox. This creates a zero span box, out of which the legend will expand in the direction given by the loc argument. E.g.,\nplt.legend(bbox_to_anchor=(1.04, 1), loc=\"upper left\")\nplaces the legend outside the axes, such that the upper left corner of the legend is at position (1.04, 1) in axes coordinates.\nFurther examples are given below, where additionally the interplay between different arguments like mode and ncols are shown.\n\nl1 = plt.legend(bbox_to_anchor=(1.04, 1), borderaxespad=0)\nl2 = plt.legend(bbox_to_anchor=(1.04, 0), loc=\"lower left\", borderaxespad=0)\nl3 = plt.legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", borderaxespad=0)\nl4 = plt.legend(bbox_to_anchor=(0, 1.02, 1, 0.2), loc=\"lower left\",\n                mode=\"expand\", borderaxespad=0, ncol=3)\nl5 = plt.legend(bbox_to_anchor=(1, 0), loc=\"lower right\",\n                bbox_transform=fig.transFigure, ncol=3)\nl6 = plt.legend(bbox_to_anchor=(0.4, 0.8), loc=\"upper right\")\n\nDetails about how to interpret the 4-tuple argument to bbox_to_anchor, as in l4, can be found in this question. The mode=\"expand\" expands the legend horizontally inside the bounding box given by the 4-tuple. For a vertically expanded legend, see this question.\nSometimes it may be useful to specify the bounding box in figure coordinates instead of axes coordinates. This is shown in the example l5 from above, where the bbox_transform argument is used to put the legend in the lower left corner of the figure.\nPostprocessing\nHaving placed the legend outside the axes often leads to the undesired situation that it is completely or partially outside the figure canvas.\nSolutions to this problem are:\n\nAdjust the subplot parameters \nOne can adjust the subplot parameters such, that the axes take less space inside the figure (and thereby leave more space to the legend) by using plt.subplots_adjust. E.g.,\nplt.subplots_adjust(right=0.7)\n\nleaves 30% space on the right-hand side of the figure, where one could place the legend.\n\nTight layout \nUsing plt.tight_layout Allows to automatically adjust the subplot parameters such that the elements in the figure sit tight against the figure edges. Unfortunately, the legend is not taken into account in this automatism, but we can supply a rectangle box that the whole subplots area (including labels) will fit into.\nplt.tight_layout(rect=[0, 0, 0.75, 1])\n\n\nSaving the figure with bbox_inches = \"tight\" \nThe argument bbox_inches = \"tight\" to plt.savefig can be used to save the figure such that all artist on the canvas (including the legend) are fit into the saved area. If needed, the figure size is automatically adjusted.\nplt.savefig(\"output.png\", bbox_inches=\"tight\")\n\n\nAutomatically adjusting the subplot parameters \nA way to automatically adjust the subplot position such that the legend fits inside the canvas without changing the figure size can be found in this answer: Creating figure with exact size and no padding (and legend outside the axes)\n\n\nComparison between the cases discussed above:\n\nAlternatives\nA figure legend\nOne may use a legend to the figure instead of the axes, matplotlib.figure.Figure.legend. This has become especially useful for Matplotlib version 2.1 or later, where no special arguments are needed\nfig.legend(loc=7)\n\nto create a legend for all artists in the different axes of the figure. The legend is placed using the loc argument, similar to how it is placed inside an axes, but in reference to the whole figure - hence it will be outside the axes somewhat automatically. What remains is to adjust the subplots such that there is no overlap between the legend and the axes. Here the point \"Adjust the subplot parameters\"  from above will be helpful. An example:\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 2*np.pi)\ncolors = [\"#7aa0c4\", \"#ca82e1\", \"#8bcd50\", \"#e18882\"]\nfig, axes = plt.subplots(ncols=2)\nfor i in range(4):\n    axes[i//2].plot(x, np.sin(x+i), color=colors[i], label=\"y=sin(x + {})\".format(i))\n\nfig.legend(loc=7)\nfig.tight_layout()\nfig.subplots_adjust(right=0.75)\nplt.show()\n\n\nLegend inside dedicated subplot axes\nAn alternative to using bbox_to_anchor would be to place the legend in its dedicated subplot axes (lax).\nSince the legend subplot should be smaller than the plot, we may use gridspec_kw={\"width_ratios\":[4, 1]} at axes creation.\nWe can hide the axes lax.axis(\"off\"), but we still put a legend in. The legend handles and labels need to obtained from the real plot via h, l = ax.get_legend_handles_labels() and can then be supplied to the legend in the lax subplot, lax.legend(h, l). A complete example is below.\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = 6, 2\n\nfig, (ax, lax) = plt.subplots(ncols=2, gridspec_kw={\"width_ratios\":[4, 1]})\nax.plot(x, y, label=\"y=sin(x)\")\n....\n\nh, l = ax.get_legend_handles_labels()\nlax.legend(h, l, borderaxespad=0)\nlax.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\n\nThis produces a plot which is visually pretty similar to the plot from above:\n\nWe could also use the first axes to place the legend, but use the bbox_transform of the legend axes,\nax.legend(bbox_to_anchor=(0, 0, 1, 1), bbox_transform=lax.transAxes)\nlax.axis(\"off\")\n\nIn this approach, we do not need to obtain the legend handles externally, but we need to specify the bbox_to_anchor argument.\nFurther reading and notes:\n\nConsider the Matplotlib legend guide with some examples of other stuff you want to do with legends.\nSome example code for placing legends for pie charts may directly be found in answer to this question: Python - Legend overlaps with the pie chart\nThe loc argument can take numbers instead of strings, which make calls shorter, however, they are not very intuitively mapped to each other. Here is the mapping for reference:", "answer_comment": [], "answer_score": "1568", "answer_code_list": ["plt.legend(loc=(1.04, 0))\n", "plt.legend(bbox_to_anchor=(1.04, 1), loc=\"upper left\")", "l1 = plt.legend(bbox_to_anchor=(1.04, 1), borderaxespad=0)\nl2 = plt.legend(bbox_to_anchor=(1.04, 0), loc=\"lower left\", borderaxespad=0)\nl3 = plt.legend(bbox_to_anchor=(1.04, 0.5), loc=\"center left\", borderaxespad=0)\nl4 = plt.legend(bbox_to_anchor=(0, 1.02, 1, 0.2), loc=\"lower left\",\n                mode=\"expand\", borderaxespad=0, ncol=3)\nl5 = plt.legend(bbox_to_anchor=(1, 0), loc=\"lower right\",\n                bbox_transform=fig.transFigure, ncol=3)\nl6 = plt.legend(bbox_to_anchor=(0.4, 0.8), loc=\"upper right\")\n", "plt.subplots_adjust(right=0.7)\n", "plt.tight_layout(rect=[0, 0, 0.75, 1])\n", "plt.savefig(\"output.png\", bbox_inches=\"tight\")\n", "fig.legend(loc=7)\n", "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 2*np.pi)\ncolors = [\"#7aa0c4\", \"#ca82e1\", \"#8bcd50\", \"#e18882\"]\nfig, axes = plt.subplots(ncols=2)\nfor i in range(4):\n    axes[i//2].plot(x, np.sin(x+i), color=colors[i], label=\"y=sin(x + {})\".format(i))\n\nfig.legend(loc=7)\nfig.tight_layout()\nfig.subplots_adjust(right=0.75)\nplt.show()\n", "import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = 6, 2\n\nfig, (ax, lax) = plt.subplots(ncols=2, gridspec_kw={\"width_ratios\":[4, 1]})\nax.plot(x, y, label=\"y=sin(x)\")\n....\n\nh, l = ax.get_legend_handles_labels()\nlax.legend(h, l, borderaxespad=0)\nlax.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\n", "ax.legend(bbox_to_anchor=(0, 0, 1, 1), bbox_transform=lax.transAxes)\nlax.axis(\"off\")\n"], "is_accepted": false}, {"answer_content": "Just call legend() after the plot() call like this:\n# Matplotlib\nplt.plot(...)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n# Pandas\ndf.myCol.plot().legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nResults would look something like this:", "answer_comment": ["works when passing the same parameters to matplotlib.pyplot.legend as well", "Does this cut off the words in the legend for anyone else?", "Calling \"tight_layout()\" fixes the cut off words for me."], "answer_score": "206", "answer_code_list": ["# Matplotlib\nplt.plot(...)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n# Pandas\ndf.myCol.plot().legend(loc='center left', bbox_to_anchor=(1, 0.5))\n"], "is_accepted": false}, {"answer_content": "You can make the legend text smaller by specifying set_size of FontProperties.\nResources:\n\nLegend guide\nmatplotlib.legend\nmatplotlib.pyplot.legend\nmatplotlib.font_manager\n\nset_size(self, size)\nValid font size are xx-small, x-small, small, medium, large, x-large, xx-large, larger, smaller, and None.\n\n\nReal Python: Python Plotting With Matplotlib (Guide)\n\n\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nfontP = FontProperties()\nfontP.set_size('xx-small')\n\np1, = plt.plot([1, 2, 3], label='Line 1')\np2, = plt.plot([3, 2, 1], label='Line 2')\nplt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)\n\n\n\nfontsize='xx-small' also works, without importing FontProperties.\n\nplt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')", "answer_comment": [], "answer_score": "200", "answer_code_list": ["import matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nfontP = FontProperties()\nfontP.set_size('xx-small')\n\np1, = plt.plot([1, 2, 3], label='Line 1')\np2, = plt.plot([3, 2, 1], label='Line 2')\nplt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)\n", "plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')\n"], "is_accepted": true}, {"answer_content": "To place the legend outside the plot area, use loc and bbox_to_anchor keywords of legend(). For example, the following code will place the legend to the right of the plot area:\nlegend(loc=\"upper left\", bbox_to_anchor=(1,1))\n\nFor more info, see the legend guide", "answer_comment": ["Okay - I like the implementation, but when I go to save the figure (without manually resizing it in the window, which I don't want to do every time), the legend is getting chopped off. Any ideas about how I might fix that?", "@astromax I'm not sure but perhaps try calling plt.tight_layout()?"], "answer_score": "108", "answer_code_list": ["legend(loc=\"upper left\", bbox_to_anchor=(1,1))\n"], "is_accepted": false}, {"answer_content": "Short answer: you can use bbox_to_anchor + bbox_extra_artists + bbox_inches='tight'.\n\nLonger answer:\nYou can use bbox_to_anchor to manually specify the location of the legend box, as some other people have pointed out in the answers. \nHowever, the usual issue is that the legend box is cropped, e.g.:\nimport matplotlib.pyplot as plt\n\n# data \nall_x = [10,20,30]\nall_y = [[1,3], [1.5,2.9],[3,2]]\n\n# Plot\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(all_x, all_y)\n\n# Add legend, title and axis labels\nlgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))\nax.set_title('Title')\nax.set_xlabel('x label')\nax.set_ylabel('y label')\n\nfig.savefig('image_output.png', dpi=300, format='png')\n\n\nIn order to prevent the legend box from getting cropped, when you save the figure you can use the parameters bbox_extra_artists and bbox_inches to ask savefig to include cropped elements in the saved image:\nfig.savefig('image_output.png', bbox_extra_artists=(lgd,), bbox_inches='tight')\nExample (I only changed the last line to add 2 parameters to fig.savefig()):\nimport matplotlib.pyplot as plt\n\n# data \nall_x = [10,20,30]\nall_y = [[1,3], [1.5,2.9],[3,2]]\n\n# Plot\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(all_x, all_y)\n\n# Add legend, title and axis labels\nlgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))\nax.set_title('Title')\nax.set_xlabel('x label')\nax.set_ylabel('y label')    \n\nfig.savefig('image_output.png', dpi=300, format='png', bbox_extra_artists=(lgd,), bbox_inches='tight')\n\n\nI wish that matplotlib would natively allow outside location for the legend box as Matlab does:\nfigure\nx = 0:.2:12;\nplot(x,besselj(1,x),x,besselj(2,x),x,besselj(3,x));\nhleg = legend('First','Second','Third',...\n              'Location','NorthEastOutside')\n% Make the text of the legend italic and color it brown\nset(hleg,'FontAngle','italic','TextColor',[.3,.2,.1])", "answer_comment": ["Thank you, but actually bbox_inches='tight' works perfectly for me even without bbox_extra_artist", "@avtomaton Thanks, good to know, which version of matplotlib do you use?", "@FranckDernoncourt python3, matplotlib version 1.5.3"], "answer_score": "93", "answer_code_list": ["import matplotlib.pyplot as plt\n\n# data \nall_x = [10,20,30]\nall_y = [[1,3], [1.5,2.9],[3,2]]\n\n# Plot\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(all_x, all_y)\n\n# Add legend, title and axis labels\nlgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))\nax.set_title('Title')\nax.set_xlabel('x label')\nax.set_ylabel('y label')\n\nfig.savefig('image_output.png', dpi=300, format='png')\n", "import matplotlib.pyplot as plt\n\n# data \nall_x = [10,20,30]\nall_y = [[1,3], [1.5,2.9],[3,2]]\n\n# Plot\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(all_x, all_y)\n\n# Add legend, title and axis labels\nlgd = ax.legend( [ 'Lag ' + str(lag) for lag in all_x], loc='center right', bbox_to_anchor=(1.3, 0.5))\nax.set_title('Title')\nax.set_xlabel('x label')\nax.set_ylabel('y label')    \n\nfig.savefig('image_output.png', dpi=300, format='png', bbox_extra_artists=(lgd,), bbox_inches='tight')\n", "figure\nx = 0:.2:12;\nplot(x,besselj(1,x),x,besselj(2,x),x,besselj(3,x));\nhleg = legend('First','Second','Third',...\n              'Location','NorthEastOutside')\n% Make the text of the legend italic and color it brown\nset(hleg,'FontAngle','italic','TextColor',[.3,.2,.1])\n"], "is_accepted": false}, {"answer_content": "In addition to all the excellent answers here, newer versions of matplotlib and pylab can automatically determine where to put the legend without interfering with the plots, if possible.\npylab.legend(loc='best')\n\nThis will automatically place the legend away from the data if possible!\n\nHowever, if there isn't any place to put the legend without overlapping the data, then you'll want to try one of the other answers; using loc=\"best\" will never put the legend outside of the plot.", "answer_comment": ["Thank you for pointing this out! I looked for this a few years back and didn't find it, and it something that really makes my live easier.", "this option is helpful but does not answer the question so i downvoted. as far as i can tell, best never puts the legend outside of the plot", "@Tommy: In the OP's comments (which seems to be gone now) it was explicitly clarified that the OP wanted the legend to not cover the graph data, and he thought that outside the plot was the only way to do that. You can see this in the answers from mefathy, Mateo Sanchez, Bastiaan, and radtek. The OP asked for X, but he wanted Y.", "Actually, not. He/she specifically asked for the legend to be outside the plot. It's in the name of the question ;) \"How to put the legend out of the plot\".", "This does not guarantee that the legend does not obscure the data. Just make a very dense plot -- there is no place to put the legend. For example, try this...  from numpy import arange, sin, pi import matplotlib.pyplot as plt  t = arange(0.0, 100.0, 0.01)  fig = plt.figure(1)  ax1 = fig.add_subplot(211) ax1.scatter(t, sin(2*pi*t),label='test') ax1.grid(True) # ax1.set_ylim((-2, 2)) ax1.set_ylabel('1 Hz') ax1.set_title('A sine wave or two')  for label in ax1.get_xticklabels():     label.set_color('r') plt.legend(loc='best') plt.show()"], "answer_score": "71", "answer_code_list": ["pylab.legend(loc='best')\n"], "is_accepted": false}, {"answer_content": "Short Answer: Invoke draggable on the legend and interactively move it wherever you want:\nax.legend().draggable()\n\nLong Answer: If you rather prefer to place the legend interactively/manually rather than programmatically, you can toggle the draggable mode of the legend so that you can drag it to wherever you want. Check the example below:\nimport matplotlib.pylab as plt\nimport numpy as np\n#define the figure and get an axes instance\nfig = plt.figure()\nax = fig.add_subplot(111)\n#plot the data\nx = np.arange(-5, 6)\nax.plot(x, x*x, label='y = x^2')\nax.plot(x, x*x*x, label='y = x^3')\nax.legend().draggable()\nplt.show()", "answer_comment": ["Not sure I understand this fully. How do I \"drag\" the legend to wherever I want with this?  I am using Python 3.6 and Jupyter Notebook"], "answer_score": "58", "answer_code_list": ["ax.legend().draggable()\n", "import matplotlib.pylab as plt\nimport numpy as np\n#define the figure and get an axes instance\nfig = plt.figure()\nax = fig.add_subplot(111)\n#plot the data\nx = np.arange(-5, 6)\nax.plot(x, x*x, label='y = x^2')\nax.plot(x, x*x*x, label='y = x^3')\nax.legend().draggable()\nplt.show()\n"], "is_accepted": false}, {"answer_content": "New in matplotlib 3.7\nFigure legends now accept \"outside\" locations directly, e.g., loc='outside right upper'.\n\nMake sure the layout is \"constrained\"\nUse fig.legend (not plt.legend or ax.legend)\nPrepend \"outside\" to the location string\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(layout='constrained')\n                               #1\n\nx = np.linspace(-np.pi, np.pi)\nax.plot(x, x, label='$f(x) = x$')\nax.plot(x, np.sin(x), label='$f(x) = sin(x)$')\nax.plot(x, np.cos(x), label='$f(x) = cos(x)$')\n\nfig.legend(loc='outside right upper')\n#2              #3\n\nplt.show()\n\n\nMultiple subplots also work fine with the new \"outside\" locations:\nfig, (ax1, ax2) = plt.subplots(1, 2, layout='constrained')\n#                                    --------------------\n\nx = np.linspace(-np.pi, np.pi)\nax1.plot(x, x,         '-',  label='$f(x) = x$')\nax1.plot(x, np.sin(x), '--', label='$f(x) = sin(x)$')\nax2.plot(x, np.cos(x), ':',  label='$f(x) = cos(x)$')\n\nfig.legend(loc='outside right center')\n#               -------\n\n\nNote that the available \"outside\" locations are preset, so use the older answers if you need finer positioning. However the standard locations should fit most use cases:\nlocs = [\n    'outside upper left', 'outside upper center', 'outside upper right',\n    'outside center left', 'upper center right',\n    'outside lower left', 'outside lower center', 'outside lower right',\n]\nfor loc in locs:\n    fig.legend(loc=loc, title=loc)\n\n\nlocs = [\n    'outside left upper', 'outside left lower',\n    'outside right upper', 'outside right lower',\n]\nfor loc in locs:\n    fig.legend(loc=loc, title=loc)", "answer_comment": ["Does unfortunately not work for ax (e.g. ax.legend(loc=\"outside lower left\", ncols=3)).", "As @Hendrik mentioned, this does not work for ax. How does one best achieve the same when using ax instead of a figure?"], "answer_score": "35", "answer_code_list": ["import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(layout='constrained')\n                               #1\n\nx = np.linspace(-np.pi, np.pi)\nax.plot(x, x, label='$f(x) = x$')\nax.plot(x, np.sin(x), label='$f(x) = sin(x)$')\nax.plot(x, np.cos(x), label='$f(x) = cos(x)$')\n\nfig.legend(loc='outside right upper')\n#2              #3\n\nplt.show()\n", "fig, (ax1, ax2) = plt.subplots(1, 2, layout='constrained')\n#                                    --------------------\n\nx = np.linspace(-np.pi, np.pi)\nax1.plot(x, x,         '-',  label='$f(x) = x$')\nax1.plot(x, np.sin(x), '--', label='$f(x) = sin(x)$')\nax2.plot(x, np.cos(x), ':',  label='$f(x) = cos(x)$')\n\nfig.legend(loc='outside right center')\n#               -------\n", "locs = [\n    'outside upper left', 'outside upper center', 'outside upper right',\n    'outside center left', 'upper center right',\n    'outside lower left', 'outside lower center', 'outside lower right',\n]\nfor loc in locs:\n    fig.legend(loc=loc, title=loc)\n", "locs = [\n    'outside left upper', 'outside left lower',\n    'outside right upper', 'outside right lower',\n]\nfor loc in locs:\n    fig.legend(loc=loc, title=loc)\n"], "is_accepted": false}, {"answer_content": "Newer versions of Matplotlib have made it much easier to position the legend outside the plot. I produced this example with Matplotlib version 3.1.1.\nUsers can pass a 2-tuple of coordinates to the loc parameter to position the legend anywhere in the bounding box. The only gotcha is you need to run plt.tight_layout() to get matplotlib to recompute the plot dimensions so the legend is visible:\nimport matplotlib.pyplot as plt\n\nplt.plot([0, 1], [0, 1], label=\"Label 1\")\nplt.plot([0, 1], [0, 2], label='Label 2')\n\nplt.legend(loc=(1.05, 0.5))\nplt.tight_layout()\n\nThis leads to the following plot:\n\nReferences:\n\nmatplotlib.pyplot.legend", "answer_comment": [], "answer_score": "23", "answer_code_list": ["import matplotlib.pyplot as plt\n\nplt.plot([0, 1], [0, 1], label=\"Label 1\")\nplt.plot([0, 1], [0, 2], label='Label 2')\n\nplt.legend(loc=(1.05, 0.5))\nplt.tight_layout()\n"], "is_accepted": false}, {"answer_content": "It is not exactly what you asked for, but I found it's an alternative for the same problem.\nMake the legend semitransparent, like so:\n\nDo this with:\nfig = pylab.figure()\nax = fig.add_subplot(111)\nax.plot(x, y, label=label, color=color)\n# Make the legend transparent:\nax.legend(loc=2, fontsize=10, fancybox=True).get_frame().set_alpha(0.5)\n# Make a transparent text box\nax.text(0.02, 0.02, yourstring, verticalalignment='bottom',\n                    horizontalalignment='left',\n                    fontsize=10,\n                    bbox={'facecolor':'white', 'alpha':0.6, 'pad':10},\n                    transform=self.ax.transAxes)", "answer_comment": [], "answer_score": "18", "answer_code_list": ["fig = pylab.figure()\nax = fig.add_subplot(111)\nax.plot(x, y, label=label, color=color)\n# Make the legend transparent:\nax.legend(loc=2, fontsize=10, fancybox=True).get_frame().set_alpha(0.5)\n# Make a transparent text box\nax.text(0.02, 0.02, yourstring, verticalalignment='bottom',\n                    horizontalalignment='left',\n                    fontsize=10,\n                    bbox={'facecolor':'white', 'alpha':0.6, 'pad':10},\n                    transform=self.ax.transAxes)\n"], "is_accepted": false}, {"answer_content": "As noted, you could also place the legend in the plot, or slightly off it to the edge as well. Here is an example using the Plotly Python API, made with an IPython Notebook. I'm on the team. \nTo begin, you'll want to install the necessary packages:\nimport plotly\nimport math\nimport random\nimport numpy as np\n\nThen, install Plotly:\nun='IPython.Demo'\nk='1fw3zw2o13'\npy = plotly.plotly(username=un, key=k)\n\n\ndef sin(x,n):\nsine = 0\nfor i in range(n):\n    sign = (-1)**i\n    sine = sine + ((x**(2.0*i+1))/math.factorial(2*i+1))*sign\nreturn sine\n\nx = np.arange(-12,12,0.1)\n\nanno = {\n'text': '$\\\\sum_{k=0}^{\\\\infty} \\\\frac {(-1)^k x^{1+2k}}{(1 + 2k)!}$',\n'x': 0.3, 'y': 0.6,'xref': \"paper\", 'yref': \"paper\",'showarrow': False,\n'font':{'size':24}\n}\n\nl = {\n'annotations': [anno], \n'title': 'Taylor series of sine',\n'xaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},\n'yaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},\n'legend':{'font':{'size':16},'bordercolor':'white','bgcolor':'#fcfcfc'}\n}\n\npy.iplot([{'x':x, 'y':sin(x,1), 'line':{'color':'#e377c2'}, 'name':'$x\\\\\\\\$'},\\\n      {'x':x, 'y':sin(x,2), 'line':{'color':'#7f7f7f'},'name':'$ x-\\\\frac{x^3}{6}$'},\\\n      {'x':x, 'y':sin(x,3), 'line':{'color':'#bcbd22'},'name':'$ x-\\\\frac{x^3}{6}+\\\\frac{x^5}{120}$'},\\\n      {'x':x, 'y':sin(x,4), 'line':{'color':'#17becf'},'name':'$ x-\\\\frac{x^5}{120}$'}], layout=l)\n\nThis creates your graph, and allows you a chance to keep the legend within the plot itself. The default for the legend if it is not set is to place it in the plot, as shown here.  \n\nFor an alternative placement, you can closely align the edge of the graph and border of the legend, and remove border lines for a closer fit. \n\nYou can move and re-style the legend and graph with code, or with the GUI. To shift the legend, you have the following options to position the legend inside the graph by assigning x and y values of <= 1. E.g : \n\n{\"x\" : 0,\"y\" : 0} -- Bottom Left \n{\"x\" : 1, \"y\" : 0} -- Bottom Right \n{\"x\" : 1, \"y\" : 1} -- Top Right \n{\"x\" : 0, \"y\" : 1} -- Top Left \n{\"x\" :.5, \"y\" : 0} -- Bottom Center \n{\"x\": .5, \"y\" : 1} -- Top Center\n\nIn this case, we choose the upper right, legendstyle = {\"x\" : 1, \"y\" : 1}, also described in the documentation:", "answer_comment": [], "answer_score": "13", "answer_code_list": ["import plotly\nimport math\nimport random\nimport numpy as np\n", "un='IPython.Demo'\nk='1fw3zw2o13'\npy = plotly.plotly(username=un, key=k)\n\n\ndef sin(x,n):\nsine = 0\nfor i in range(n):\n    sign = (-1)**i\n    sine = sine + ((x**(2.0*i+1))/math.factorial(2*i+1))*sign\nreturn sine\n\nx = np.arange(-12,12,0.1)\n\nanno = {\n'text': '$\\\\sum_{k=0}^{\\\\infty} \\\\frac {(-1)^k x^{1+2k}}{(1 + 2k)!}$',\n'x': 0.3, 'y': 0.6,'xref': \"paper\", 'yref': \"paper\",'showarrow': False,\n'font':{'size':24}\n}\n\nl = {\n'annotations': [anno], \n'title': 'Taylor series of sine',\n'xaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},\n'yaxis':{'ticks':'','linecolor':'white','showgrid':False,'zeroline':False},\n'legend':{'font':{'size':16},'bordercolor':'white','bgcolor':'#fcfcfc'}\n}\n\npy.iplot([{'x':x, 'y':sin(x,1), 'line':{'color':'#e377c2'}, 'name':'$x\\\\\\\\$'},\\\n      {'x':x, 'y':sin(x,2), 'line':{'color':'#7f7f7f'},'name':'$ x-\\\\frac{x^3}{6}$'},\\\n      {'x':x, 'y':sin(x,3), 'line':{'color':'#bcbd22'},'name':'$ x-\\\\frac{x^3}{6}+\\\\frac{x^5}{120}$'},\\\n      {'x':x, 'y':sin(x,4), 'line':{'color':'#17becf'},'name':'$ x-\\\\frac{x^5}{120}$'}], layout=l)\n"], "is_accepted": false}, {"answer_content": "I simply used the string 'center left' for the location, like in MATLAB.\nI imported pyplot from Matplotlib.\nSee the code as follows:\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nt = A[:, 0]\nsensors = A[:, index_lst]\n\nfor i in range(sensors.shape[1]):\n    plt.plot(t, sensors[:, i])\n\nplt.xlabel('s')\nplt.ylabel('\u00b0C')\nlgd = plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fancybox = True, shadow = True)", "answer_comment": [], "answer_score": "13", "answer_code_list": ["import matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\nt = A[:, 0]\nsensors = A[:, index_lst]\n\nfor i in range(sensors.shape[1]):\n    plt.plot(t, sensors[:, i])\n\nplt.xlabel('s')\nplt.ylabel('\u00b0C')\nlgd = plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fancybox = True, shadow = True)\n"], "is_accepted": false}, {"answer_content": "You can also try figlegend.  It is possible to create a legend independent of any Axes object.  However, you may need to create some \"dummy\" Paths to make sure the formatting for the objects gets passed on correctly.", "answer_comment": [], "answer_score": "6", "answer_code_list": [], "is_accepted": false}, {"answer_content": "Here's another solution, similar to adding bbox_extra_artists and bbox_inches, where you don't have to have your extra artists in the scope of your savefig call. I came up with this since I generate most of my plot inside functions.\nInstead of adding all your additions to the bounding box when you want to write it out, you can add them ahead of time to the Figure's artists. Using something similar to Franck Dernoncourt's answer:\nimport matplotlib.pyplot as plt\n\n# Data\nall_x = [10, 20, 30]\nall_y = [[1, 3], [1.5, 2.9], [3, 2]]\n\n# Plotting function\ndef gen_plot(x, y):\n    fig = plt.figure(1)\n    ax = fig.add_subplot(111)\n    ax.plot(all_x, all_y)\n    lgd = ax.legend([\"Lag \" + str(lag) for lag in all_x], loc=\"center right\", bbox_to_anchor=(1.3, 0.5))\n    fig.artists.append(lgd) # Here's the change\n    ax.set_title(\"Title\")\n    ax.set_xlabel(\"x label\")\n    ax.set_ylabel(\"y label\")\n    return fig\n\n# Plotting\nfig = gen_plot(all_x, all_y)\n\n# No need for `bbox_extra_artists`\nfig.savefig(\"image_output.png\", dpi=300, format=\"png\", bbox_inches=\"tight\")\n\n.", "answer_comment": [], "answer_score": "6", "answer_code_list": ["import matplotlib.pyplot as plt\n\n# Data\nall_x = [10, 20, 30]\nall_y = [[1, 3], [1.5, 2.9], [3, 2]]\n\n# Plotting function\ndef gen_plot(x, y):\n    fig = plt.figure(1)\n    ax = fig.add_subplot(111)\n    ax.plot(all_x, all_y)\n    lgd = ax.legend([\"Lag \" + str(lag) for lag in all_x], loc=\"center right\", bbox_to_anchor=(1.3, 0.5))\n    fig.artists.append(lgd) # Here's the change\n    ax.set_title(\"Title\")\n    ax.set_xlabel(\"x label\")\n    ax.set_ylabel(\"y label\")\n    return fig\n\n# Plotting\nfig = gen_plot(all_x, all_y)\n\n# No need for `bbox_extra_artists`\nfig.savefig(\"image_output.png\", dpi=300, format=\"png\", bbox_inches=\"tight\")\n"], "is_accepted": false}, {"answer_content": "Something along these lines worked for me. Starting with a bit of code taken from Joe, this method modifies the window width to automatically fit a legend to the right of the figure.\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.ion()\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Put a legend to the right of the current axis\nleg = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.draw()\n\n# Get the ax dimensions.\nbox = ax.get_position()\nxlocs = (box.x0,box.x1)\nylocs = (box.y0,box.y1)\n\n# Get the figure size in inches and the dpi.\nw, h = fig.get_size_inches()\ndpi = fig.get_dpi()\n\n# Get the legend size, calculate new window width and change the figure size.\nlegWidth = leg.get_window_extent().width\nwinWidthNew = w*dpi+legWidth\nfig.set_size_inches(winWidthNew/dpi,h)\n\n# Adjust the window size to fit the figure.\nmgr = plt.get_current_fig_manager()\nmgr.window.wm_geometry(\"%ix%i\"%(winWidthNew,mgr.window.winfo_height()))\n\n# Rescale the ax to keep its original size.\nfactor = w*dpi/winWidthNew\nx0 = xlocs[0]*factor\nx1 = xlocs[1]*factor\nwidth = box.width*factor\nax.set_position([x0,ylocs[0],x1-x0,ylocs[1]-ylocs[0]])\n\nplt.draw()", "answer_comment": ["I found this quite useful and it worked for me. Note that if you're in the wx backend (e.g. using windows), replace mgr.window.wm_geometry(\"%ix%i\"%(winWidthNew,mgr.window.winfo_height())) with mgr.window.SetClientSizeWH(winWidthNew,winHeightNew) or the like", "If you're using the Qt4Agg backend (which is default on my Linux installation of matplotlib), then replace the line mgr.window.wm_geometry(...) with mgr.window.setFixedWidth(winWidthNew).", "And, as I just discovered, if you're using a backend that doesn't show any windows, that are meant for saving straight to a file (like the SVG and AGG backends), just skip the window resizing altogether. fig.set_size_inches(...) takes care of the resizing you need."], "answer_score": "5", "answer_code_list": ["import matplotlib.pyplot as plt\nimport numpy as np\n\nplt.ion()\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Put a legend to the right of the current axis\nleg = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.draw()\n\n# Get the ax dimensions.\nbox = ax.get_position()\nxlocs = (box.x0,box.x1)\nylocs = (box.y0,box.y1)\n\n# Get the figure size in inches and the dpi.\nw, h = fig.get_size_inches()\ndpi = fig.get_dpi()\n\n# Get the legend size, calculate new window width and change the figure size.\nlegWidth = leg.get_window_extent().width\nwinWidthNew = w*dpi+legWidth\nfig.set_size_inches(winWidthNew/dpi,h)\n\n# Adjust the window size to fit the figure.\nmgr = plt.get_current_fig_manager()\nmgr.window.wm_geometry(\"%ix%i\"%(winWidthNew,mgr.window.winfo_height()))\n\n# Rescale the ax to keep its original size.\nfactor = w*dpi/winWidthNew\nx0 = xlocs[0]*factor\nx1 = xlocs[1]*factor\nwidth = box.width*factor\nax.set_position([x0,ylocs[0],x1-x0,ylocs[1]-ylocs[0]])\n\nplt.draw()\n"], "is_accepted": false}, {"answer_content": "The solution that worked for me when I had a huge legend was to use an extra empty image layout.\nIn the following example, I made four rows and at the bottom I plotted the image with an offset for the legend (bbox_to_anchor). At the top it does not get cut.\nf = plt.figure()\nax = f.add_subplot(414)\nlgd = ax.legend(loc='upper left', bbox_to_anchor=(0, 4), mode=\"expand\", borderaxespad=0.3)\nax.autoscale_view()\nplt.savefig(fig_name, format='svg', dpi=1200, bbox_extra_artists=(lgd,), bbox_inches='tight')", "answer_comment": [], "answer_score": "4", "answer_code_list": ["f = plt.figure()\nax = f.add_subplot(414)\nlgd = ax.legend(loc='upper left', bbox_to_anchor=(0, 4), mode=\"expand\", borderaxespad=0.3)\nax.autoscale_view()\nplt.savefig(fig_name, format='svg', dpi=1200, bbox_extra_artists=(lgd,), bbox_inches='tight')\n"], "is_accepted": false}, {"answer_content": "Here is an example from the matplotlib tutorial found here. This is one of the more simpler examples but I added transparency to the legend and added plt.show() so you can paste this into the interactive shell and get a result:\nimport matplotlib.pyplot as plt\np1, = plt.plot([1, 2, 3])\np2, = plt.plot([3, 2, 1])\np3, = plt.plot([2, 3, 1])\nplt.legend([p2, p1, p3], [\"line 1\", \"line 2\", \"line 3\"]).get_frame().set_alpha(0.5)\nplt.show()", "answer_comment": [], "answer_score": "3", "answer_code_list": ["import matplotlib.pyplot as plt\np1, = plt.plot([1, 2, 3])\np2, = plt.plot([3, 2, 1])\np3, = plt.plot([2, 3, 1])\nplt.legend([p2, p1, p3], [\"line 1\", \"line 2\", \"line 3\"]).get_frame().set_alpha(0.5)\nplt.show()\n"], "is_accepted": false}], "views": "2.0m", "title": "How to put the legend outside the plot", "question_link": "https://stackoverflow.com/questions/4700614/how-to-put-the-legend-outside-the-plot", "question_content": "I have a series of 20 plots (not subplots) to be made in a single figure. I want the legend to be outside of the box. At the same time, I do not want to change the axes, as the size of the figure gets reduced.\n\nI want to keep the legend box outside the plot area (I want the legend to be outside at the right side of the plot area).\nIs there a way to reduce the font size of the text inside the legend box, so that the size of the legend box will be small?", "question_comment": ["seaborn is a high-level api for matplotlib. From seaborn v0.11.2, there is sns.move_legend as shown at Move seaborn plot legend to a different position. All of the parameters for .legend can be passed to .move_legend, and all of the answers below work directly with seaborn axes-level plots (e.g. those that return matplotlib Axes)."]}]