[{"votes": "3247", "answers": [{"answer_content": "figure tells you the call signature:\nfrom matplotlib.pyplot import figure\n\nfigure(figsize=(8, 6), dpi=80)\n\nfigure(figsize=(1,1)) would create an inch-by-inch image, which would be 80-by-80 pixels unless you also give a different dpi argument.", "answer_comment": ["And so that no one who lands here has to click on the link, the first number is WIDTH, and the second number is HEIGHT, so figsize=(8, 6) creates a figure that is 8 inches wide and 6 inches tall.", "If I type figure(figsize=(8,6)) I get TypeError: module object is not callable"], "answer_score": "1913", "answer_code_list": ["from matplotlib.pyplot import figure\n\nfigure(figsize=(8, 6), dpi=80)\n"], "is_accepted": false}, {"answer_content": "If you've already got the figure created, you can use figure.set_size_inches to adjust the figure size:\nfig = matplotlib.pyplot.gcf()\nfig.set_size_inches(18.5, 10.5)\nfig.savefig('test2png.png', dpi=100)\n\nTo propagate the size change to an existing GUI window, add forward=True:\nfig.set_size_inches(18.5, 10.5, forward=True)\n\nAdditionally as Erik Shilts mentioned in the comments you can also use figure.set_dpi to \"[s]et the resolution of the figure in dots-per-inch\"\nfig.set_dpi(100)", "answer_comment": [], "answer_score": "1180", "answer_code_list": ["fig = matplotlib.pyplot.gcf()\nfig.set_size_inches(18.5, 10.5)\nfig.savefig('test2png.png', dpi=100)\n", "fig.set_size_inches(18.5, 10.5, forward=True)\n", "fig.set_dpi(100)\n"], "is_accepted": false}, {"answer_content": "Using plt.rcParams\nThere is also this workaround in case you want to change the size without using the figure environment. So in case you are using plt.plot() for example, you can set a tuple with width and height.\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,3)\n\nThis is very useful when you plot inline (e.g., with IPython Notebook). As asmaier noticed, it is preferable to not put this statement in the same cell of the imports statements.\nTo reset the global figure size back to default for subsequent plots:\nplt.rcParams[\"figure.figsize\"] = plt.rcParamsDefault[\"figure.figsize\"]\n\nConversion to cm\nThe figsize tuple accepts inches, so if you want to set it in centimetres you have to divide them by 2.54. Have a look at this question.", "answer_comment": [], "answer_score": "794", "answer_code_list": ["import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,3)\n", "plt.rcParams[\"figure.figsize\"] = plt.rcParamsDefault[\"figure.figsize\"]\n"], "is_accepted": false}, {"answer_content": "Deprecation note:\nAs per the official Matplotlib guide, usage of the pylab module is no longer recommended. Please consider using the matplotlib.pyplot module instead, as described by this other answer.\n\nThe following seems to work:\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 5, 10\n\nThis makes the figure's width 5 inches, and its height 10 inches.\nThe Figure class then uses this as the default value for one of its arguments.", "answer_comment": [], "answer_score": "443", "answer_code_list": ["from pylab import rcParams\nrcParams['figure.figsize'] = 5, 10\n"], "is_accepted": false}, {"answer_content": "In case you're looking for a way to change the figure size in Pandas, you could do:\ndf['some_column'].plot(figsize=(10, 5))\n\nwhere df is a Pandas dataframe. Or, to use an existing figure or axes:\nfig, ax = plt.subplots(figsize=(10, 5))\ndf['some_column'].plot(ax=ax)\n\nIf you want to change the default settings, you could do the following:\nimport matplotlib\n\nmatplotlib.rc('figure', figsize=(10, 5))\n\nFor more details, check out the docs: pd.DataFrame.plot.", "answer_comment": [], "answer_score": "220", "answer_code_list": ["df['some_column'].plot(figsize=(10, 5))\n", "fig, ax = plt.subplots(figsize=(10, 5))\ndf['some_column'].plot(ax=ax)\n", "import matplotlib\n\nmatplotlib.rc('figure', figsize=(10, 5))\n"], "is_accepted": false}, {"answer_content": "The first link in Google for 'matplotlib figure size' is AdjustingImageSize (Google cache of the page).\nHere's a test script from the above page. It creates test[1-3].png files of different sizes of the same image:\n#!/usr/bin/env python\n\"\"\"\nThis is a small demo file that helps teach how to adjust figure sizes\nfor matplotlib\n\n\"\"\"\n\nimport matplotlib\nprint \"using MPL version:\", matplotlib.__version__\nmatplotlib.use(\"WXAgg\") # do this before pylab so you don'tget the default back end.\n\nimport pylab\nimport numpy as np\n\n# Generate and plot some simple data:\nx = np.arange(0, 2*np.pi, 0.1)\ny = np.sin(x)\n\npylab.plot(x,y)\nF = pylab.gcf()\n\n# Now check everything with the defaults:\nDPI = F.get_dpi()\nprint \"DPI:\", DPI\nDefaultSize = F.get_size_inches()\nprint \"Default size in Inches\", DefaultSize\nprint \"Which should result in a %i x %i Image\"%(DPI*DefaultSize[0], DPI*DefaultSize[1])\n# the default is 100dpi for savefig:\nF.savefig(\"test1.png\")\n# this gives me a 797 x 566 pixel image, which is about 100 DPI\n\n# Now make the image twice as big, while keeping the fonts and all the\n# same size\nF.set_size_inches( (DefaultSize[0]*2, DefaultSize[1]*2) )\nSize = F.get_size_inches()\nprint \"Size in Inches\", Size\nF.savefig(\"test2.png\")\n# this results in a 1595x1132 image\n\n# Now make the image twice as big, making all the fonts and lines\n# bigger too.\n\nF.set_size_inches( DefaultSize )# resetthe size\nSize = F.get_size_inches()\nprint \"Size in Inches\", Size\nF.savefig(\"test3.png\", dpi = (200)) # change the dpi\n# this also results in a 1595x1132 image, but the fonts are larger.\n\nOutput:\nusing MPL version: 0.98.1\nDPI: 80\nDefault size in Inches [ 8.  6.]\nWhich should result in a 640 x 480 Image\nSize in Inches [ 16.  12.]\nSize in Inches [ 16.  12.]\n\nTwo notes:\n\nThe module comments and the actual output differ.\n\nThis answer allows easily to combine all three images in one image file to see the difference in sizes.", "answer_comment": [], "answer_score": "90", "answer_code_list": ["#!/usr/bin/env python\n\"\"\"\nThis is a small demo file that helps teach how to adjust figure sizes\nfor matplotlib\n\n\"\"\"\n\nimport matplotlib\nprint \"using MPL version:\", matplotlib.__version__\nmatplotlib.use(\"WXAgg\") # do this before pylab so you don'tget the default back end.\n\nimport pylab\nimport numpy as np\n\n# Generate and plot some simple data:\nx = np.arange(0, 2*np.pi, 0.1)\ny = np.sin(x)\n\npylab.plot(x,y)\nF = pylab.gcf()\n\n# Now check everything with the defaults:\nDPI = F.get_dpi()\nprint \"DPI:\", DPI\nDefaultSize = F.get_size_inches()\nprint \"Default size in Inches\", DefaultSize\nprint \"Which should result in a %i x %i Image\"%(DPI*DefaultSize[0], DPI*DefaultSize[1])\n# the default is 100dpi for savefig:\nF.savefig(\"test1.png\")\n# this gives me a 797 x 566 pixel image, which is about 100 DPI\n\n# Now make the image twice as big, while keeping the fonts and all the\n# same size\nF.set_size_inches( (DefaultSize[0]*2, DefaultSize[1]*2) )\nSize = F.get_size_inches()\nprint \"Size in Inches\", Size\nF.savefig(\"test2.png\")\n# this results in a 1595x1132 image\n\n# Now make the image twice as big, making all the fonts and lines\n# bigger too.\n\nF.set_size_inches( DefaultSize )# resetthe size\nSize = F.get_size_inches()\nprint \"Size in Inches\", Size\nF.savefig(\"test3.png\", dpi = (200)) # change the dpi\n# this also results in a 1595x1132 image, but the fonts are larger.\n", "using MPL version: 0.98.1\nDPI: 80\nDefault size in Inches [ 8.  6.]\nWhich should result in a 640 x 480 Image\nSize in Inches [ 16.  12.]\nSize in Inches [ 16.  12.]\n"], "is_accepted": false}, {"answer_content": "Adjust the figsize= parameter in matplotlib.pyplot.figure, which is similar to this answer, but uses the standard plt import alias, and doesn't directly import figure from the pyplot namespace.\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 50\nnp.random.seed(2022)  # creates a repetitive sample data\nx = np.random.rand(N)\ny = np.random.rand(N)\narea = np.pi * (15 * np.random.rand(N))**2\n\nfig = plt.figure(figsize=(10, 10))\nplt.scatter(x, y, s=area, alpha=0.5)\nplt.show()\n\nWithout fig = plt.figure(figsize=(10, 10))\n\nWith fig = plt.figure(figsize=(10, 10))", "answer_comment": ["Maybe this is a dumb question - why are you assigning fig as a variable when its not ever used anywhere?", "@RaleighL. have you tried without?"], "answer_score": "73", "answer_code_list": ["import numpy as np\nimport matplotlib.pyplot as plt\n\nN = 50\nnp.random.seed(2022)  # creates a repetitive sample data\nx = np.random.rand(N)\ny = np.random.rand(N)\narea = np.pi * (15 * np.random.rand(N))**2\n\nfig = plt.figure(figsize=(10, 10))\nplt.scatter(x, y, s=area, alpha=0.5)\nplt.show()\n"], "is_accepted": false}, {"answer_content": "You can simply use (from matplotlib.figure.Figure):\nfig.set_size_inches(width,height)\n\nAs of Matplotlib 2.0.0, changes to your canvas will be visible immediately, as the forward keyword defaults to True.\nIf you want to just change the width or height instead of both, you can use \nfig.set_figwidth(val) or fig.set_figheight(val)\nThese will also immediately update your canvas, but only in Matplotlib 2.2.0 and newer.\nFor Older Versions\nYou need to specify forward=True explicitly in order to live-update your canvas in versions older than what is specified above. Note that the set_figwidth and set_figheight functions don\u2019t support the forward parameter in versions older than Matplotlib 1.5.0.", "answer_comment": [], "answer_score": "64", "answer_code_list": ["fig.set_size_inches(width,height)\n"], "is_accepted": false}, {"answer_content": "This works well for me:\nfrom matplotlib import pyplot as plt\n\nF = plt.gcf()\nSize = F.get_size_inches()\nF.set_size_inches(Size[0]*2, Size[1]*2, forward=True) # Set forward to True to resize window along with plot in figure.\nplt.show() # Or plt.imshow(z_array) if using an animation, where z_array is a matrix or NumPy array\n\nThis forum post might also help: Resizing figure windows", "answer_comment": [], "answer_score": "43", "answer_code_list": ["from matplotlib import pyplot as plt\n\nF = plt.gcf()\nSize = F.get_size_inches()\nF.set_size_inches(Size[0]*2, Size[1]*2, forward=True) # Set forward to True to resize window along with plot in figure.\nplt.show() # Or plt.imshow(z_array) if using an animation, where z_array is a matrix or NumPy array\n"], "is_accepted": false}, {"answer_content": "Comparison of different approaches to set exact image sizes in pixels\nThis answer will focus on:\n\nsavefig: how to save to a file, not just show on screen\nsetting the size in pixels\n\nHere is a quick comparison of some of the approaches I've tried with images showing what the give.\nSummary of current status: things are messy, and I am not sure if it is a fundamental limitation, or if the use case just didn't get enough attention from developers. I couldn't easily find an upstream discussion about this.\nBaseline example without trying to set the image dimensions\nJust to have a comparison point:\nbase.py\n#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nfig, ax = plt.subplots()\nprint('fig.dpi = {}'.format(fig.dpi))\nprint('fig.get_size_inches() = ' + str(fig.get_size_inches())\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig('base.png', format='png')\n\nRun:\n./base.py\nidentify base.png\n\nOutputs:\nfig.dpi = 100.0\nfig.get_size_inches() = [6.4 4.8]\nbase.png PNG 640x480 640x480+0+0 8-bit sRGB 13064B 0.000u 0:00.000\n\n\nMy best approach so far: plt.savefig(dpi=h/fig.get_size_inches()[1] height-only control\nI think this is what I'll go with most of the time, as it is simple and scales:\nget_size.py\n#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nheight = int(sys.argv[1])\nfig, ax = plt.subplots()\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'get_size.png',\n    format='png',\n    dpi=height/fig.get_size_inches()[1]\n)\n\nRun:\n./get_size.py 431\n\nOutputs:\nget_size.png PNG 574x431 574x431+0+0 8-bit sRGB 10058B 0.000u 0:00.000\n\n\nand\n./get_size.py 1293\n\nOutputs:\nmain.png PNG 1724x1293 1724x1293+0+0 8-bit sRGB 46709B 0.000u 0:00.000\n\n\nI tend to set just the height because I'm usually most concerned about how much vertical space the image is going to take up in the middle of my text.\nplt.savefig(bbox_inches='tight' changes image size\nI always feel that there is too much white space around images, and tended to add bbox_inches='tight' from:\nRemoving white space around a saved image\nHowever, that works by cropping the image, and you won't get the desired sizes with it.\nInstead, this other approach proposed in the same question seems to work well:\nplt.tight_layout(pad=1)\nplt.savefig(...\n\nwhich gives the exact desired height for height equals 431:\n\nFixed height, set_aspect, automatically sized width and small margins\nErmmm, set_aspect messes things up again and prevents plt.tight_layout from actually removing the margins... this is an important use case that I don't have a great solution for yet.\nAsked at: How to obtain a fixed height in pixels, fixed data x/y aspect ratio and automatically remove remove horizontal whitespace margin in Matplotlib?\nplt.savefig(dpi=h/fig.get_size_inches()[1] + width control\nIf you really need a specific width in addition to height, this seems to work OK:\nwidth.py\n#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nh = int(sys.argv[1])\nw = int(sys.argv[2])\nfig, ax = plt.subplots()\nwi, hi = fig.get_size_inches()\nfig.set_size_inches(hi*(w/h), hi)\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'width.png',\n    format='png',\n    dpi=h/hi\n)\n\nRun:\n./width.py 431 869\n\nOutput:\nwidth.png PNG 869x431 869x431+0+0 8-bit sRGB 10965B 0.000u 0:00.000\n\n\nand for a small width:\n./width.py 431 869\n\nOutput:\nwidth.png PNG 211x431 211x431+0+0 8-bit sRGB 6949B 0.000u 0:00.000\n\n\nSo it does seem that fonts are scaling correctly, we just get some trouble for very small widths with labels getting cut off, e.g. the 100 on the top left.\nI managed to work around those with Removing white space around a saved image\nplt.tight_layout(pad=1)\n\nwhich gives:\nwidth.png PNG 211x431 211x431+0+0 8-bit sRGB 7134B 0.000u 0:00.000\n\n\nFrom this, we also see that tight_layout removes a lot of the empty space at the top of the image, so I just generally always use it.\nFixed magic base height, dpi on fig.set_size_inches and plt.savefig(dpi= scaling\nI believe that this is equivalent to the approach mentioned at: https://stackoverflow.com/a/13714720/895245\nmagic.py\n#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nmagic_height = 300\nw = int(sys.argv[1])\nh = int(sys.argv[2])\ndpi = 80\nfig, ax = plt.subplots(dpi=dpi)\nfig.set_size_inches(magic_height*w/(h*dpi), magic_height/dpi)\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'magic.png',\n    format='png',\n    dpi=h/magic_height*dpi,\n)\n\nRun:\n./magic.py 431 231\n\nOutputs:\nmagic.png PNG 431x231 431x231+0+0 8-bit sRGB 7923B 0.000u 0:00.000\n\n\nAnd to see if it scales nicely:\n./magic.py 1291 693\n\nOutputs:\nmagic.png PNG 1291x693 1291x693+0+0 8-bit sRGB 25013B 0.000u 0:00.000\n\n\nSo we see that this approach also does work well. The only problem I have with it is that you have to set that magic_height parameter or equivalent.\nFixed DPI + set_size_inches\nThis approach gave a slightly wrong pixel size, and it makes it is hard to scale everything seamlessly.\nset_size_inches.py\n#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nw = int(sys.argv[1])\nh = int(sys.argv[2])\nfig, ax = plt.subplots()\nfig.set_size_inches(w/fig.dpi, h/fig.dpi)\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(\n    0,\n    60.,\n    'Hello',\n    # Keep font size fixed independently of DPI.\n    # https://stackoverflow.com/questions/39395616/matplotlib-change-figsize-but-keep-fontsize-constant\n    fontdict=dict(size=10*h/fig.dpi),\n)\nplt.savefig(\n    'set_size_inches.png',\n    format='png',\n)\n\nRun:\n./set_size_inches.py 431 231\n\nOutputs:\nset_size_inches.png PNG 430x231 430x231+0+0 8-bit sRGB 8078B 0.000u 0:00.000\n\nSo the height is slightly off, and the image:\n\nThe pixel sizes are also correct if I make it 3 times larger:\n./set_size_inches.py 1291 693\n\nOutputs:\nset_size_inches.png PNG 1291x693 1291x693+0+0 8-bit sRGB 19798B 0.000u 0:00.000\n\n\nWe understand from this however that for this approach to scale nicely, you need to make every DPI-dependant setting proportional to the size in inches.\nIn the previous example, we only made the \"Hello\" text proportional, and it did retain its height between 60 and 80 as we'd expect. But everything for which we didn't do that, looks tiny, including:\n\nline width of axes\ntick labels\npoint markers\n\nSVG\nI could not find how to set it for SVG images, my approaches only worked for PNG, e.g.:\nget_size_svg.py\n#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nheight = int(sys.argv[1])\nfig, ax = plt.subplots()\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'get_size_svg.svg',\n    format='svg',\n    dpi=height/fig.get_size_inches()[1]\n)\n\nRun:\n./get_size_svg.py 431\n\nAnd the generated output contains:\n<svg height=\"345.6pt\" version=\"1.1\" viewBox=\"0 0 460.8 345.6\" width=\"460.8pt\"\n\nAnd identify says:\nget_size_svg.svg SVG 614x461 614x461+0+0 8-bit sRGB 17094B 0.000u 0:00.000\n\nAnd if I open it in Chromium 86 the browser debug tools mouse image hover confirm that height as 460.79.\nBut of course, since SVG is a vector format, everything should in theory scale, so you can just convert to any fixed sized format without loss of resolution, e.g.:\ninkscape -h 431 get_size_svg.svg -b FFF -e get_size_svg.png\n\ngives the exact height:\n\nI use Inkscape instead of ImageMagick's convert here because you need to mess with -density as well to get sharp SVG resizes with ImageMagick:\n\nhttps://superuser.com/questions/598849/imagemagick-convert-how-to-produce-sharp-resized-png-files-from-svg-files/1602059#1602059\nHow to convert a SVG to a PNG with ImageMagick?\n\nAnd setting <img height=\"\" on the HTML should also just work for the browser.\nIt was tested on matplotlib 3.2.2.", "answer_comment": [], "answer_score": "37", "answer_code_list": ["#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nfig, ax = plt.subplots()\nprint('fig.dpi = {}'.format(fig.dpi))\nprint('fig.get_size_inches() = ' + str(fig.get_size_inches())\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig('base.png', format='png')\n", "./base.py\nidentify base.png\n", "fig.dpi = 100.0\nfig.get_size_inches() = [6.4 4.8]\nbase.png PNG 640x480 640x480+0+0 8-bit sRGB 13064B 0.000u 0:00.000\n", "#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nheight = int(sys.argv[1])\nfig, ax = plt.subplots()\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'get_size.png',\n    format='png',\n    dpi=height/fig.get_size_inches()[1]\n)\n", "./get_size.py 431\n", "get_size.png PNG 574x431 574x431+0+0 8-bit sRGB 10058B 0.000u 0:00.000\n", "./get_size.py 1293\n", "main.png PNG 1724x1293 1724x1293+0+0 8-bit sRGB 46709B 0.000u 0:00.000\n", "plt.tight_layout(pad=1)\nplt.savefig(...\n", "#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nh = int(sys.argv[1])\nw = int(sys.argv[2])\nfig, ax = plt.subplots()\nwi, hi = fig.get_size_inches()\nfig.set_size_inches(hi*(w/h), hi)\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'width.png',\n    format='png',\n    dpi=h/hi\n)\n", "./width.py 431 869\n", "width.png PNG 869x431 869x431+0+0 8-bit sRGB 10965B 0.000u 0:00.000\n", "./width.py 431 869\n", "width.png PNG 211x431 211x431+0+0 8-bit sRGB 6949B 0.000u 0:00.000\n", "plt.tight_layout(pad=1)\n", "width.png PNG 211x431 211x431+0+0 8-bit sRGB 7134B 0.000u 0:00.000\n", "#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nmagic_height = 300\nw = int(sys.argv[1])\nh = int(sys.argv[2])\ndpi = 80\nfig, ax = plt.subplots(dpi=dpi)\nfig.set_size_inches(magic_height*w/(h*dpi), magic_height/dpi)\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'magic.png',\n    format='png',\n    dpi=h/magic_height*dpi,\n)\n", "./magic.py 431 231\n", "magic.png PNG 431x231 431x231+0+0 8-bit sRGB 7923B 0.000u 0:00.000\n", "./magic.py 1291 693\n", "magic.png PNG 1291x693 1291x693+0+0 8-bit sRGB 25013B 0.000u 0:00.000\n", "#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nw = int(sys.argv[1])\nh = int(sys.argv[2])\nfig, ax = plt.subplots()\nfig.set_size_inches(w/fig.dpi, h/fig.dpi)\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(\n    0,\n    60.,\n    'Hello',\n    # Keep font size fixed independently of DPI.\n    # https://stackoverflow.com/questions/39395616/matplotlib-change-figsize-but-keep-fontsize-constant\n    fontdict=dict(size=10*h/fig.dpi),\n)\nplt.savefig(\n    'set_size_inches.png',\n    format='png',\n)\n", "./set_size_inches.py 431 231\n", "set_size_inches.png PNG 430x231 430x231+0+0 8-bit sRGB 8078B 0.000u 0:00.000\n", "./set_size_inches.py 1291 693\n", "set_size_inches.png PNG 1291x693 1291x693+0+0 8-bit sRGB 19798B 0.000u 0:00.000\n", "#!/usr/bin/env python3\n\nimport sys\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nheight = int(sys.argv[1])\nfig, ax = plt.subplots()\nt = np.arange(-10., 10., 1.)\nplt.plot(t, t, '.')\nplt.plot(t, t**2, '.')\nax.text(0., 60., 'Hello', fontdict=dict(size=25))\nplt.savefig(\n    'get_size_svg.svg',\n    format='svg',\n    dpi=height/fig.get_size_inches()[1]\n)\n", "./get_size_svg.py 431\n", "<svg height=\"345.6pt\" version=\"1.1\" viewBox=\"0 0 460.8 345.6\" width=\"460.8pt\"\n", "get_size_svg.svg SVG 614x461 614x461+0+0 8-bit sRGB 17094B 0.000u 0:00.000\n", "inkscape -h 431 get_size_svg.svg -b FFF -e get_size_svg.png\n"], "is_accepted": false}, {"answer_content": "Generalizing and simplifying psihodelia's answer:\nIf you want to change the current size of the figure by a factor sizefactor:\nimport matplotlib.pyplot as plt\n\n# Here goes your code\n\nfig_size = plt.gcf().get_size_inches() # Get current size\nsizefactor = 0.8 # Set a zoom factor\n# Modify the current size by the factor\nplt.gcf().set_size_inches(sizefactor * fig_size) \n\nAfter changing the current size, it might occur that you have to fine tune the subplot layout. You can do that in the figure window GUI, or by means of the command subplots_adjust\nFor example,\nplt.subplots_adjust(left=0.16, bottom=0.19, top=0.82)", "answer_comment": [], "answer_score": "16", "answer_code_list": ["import matplotlib.pyplot as plt\n\n# Here goes your code\n\nfig_size = plt.gcf().get_size_inches() # Get current size\nsizefactor = 0.8 # Set a zoom factor\n# Modify the current size by the factor\nplt.gcf().set_size_inches(sizefactor * fig_size) \n", "plt.subplots_adjust(left=0.16, bottom=0.19, top=0.82)\n"], "is_accepted": false}, {"answer_content": "This resizes the figure immediately even after the figure has been drawn (at least using Qt4Agg/TkAgg - but not Mac\u00a0OS\u00a0X - with Matplotlib 1.4.0):\nmatplotlib.pyplot.get_current_fig_manager().resize(width_px, height_px)", "answer_comment": [], "answer_score": "15", "answer_code_list": ["matplotlib.pyplot.get_current_fig_manager().resize(width_px, height_px)\n"], "is_accepted": false}, {"answer_content": "I usually care more about the relative sizes of height/width rather than the actual values in inches. So, I use plt.figaspect() to set the aspect ratio.\n# Make the image 3x as wide as it is tall\nfix, ax = plt.subplots(figsize=plt.figaspect(1/3))\nplt.title(\"I'm 3x as wide as I am tall\")\nplt.show()", "answer_comment": [], "answer_score": "6", "answer_code_list": ["# Make the image 3x as wide as it is tall\nfix, ax = plt.subplots(figsize=plt.figaspect(1/3))\nplt.title(\"I'm 3x as wide as I am tall\")\nplt.show()\n"], "is_accepted": false}, {"answer_content": "I always use the following pattern:\nx_inches = 150*(1/25.4)     # [mm]*constant\ny_inches = x_inches*(0.8)\ndpi = 96\n\nfig = plt.figure(1, figsize = (x_inches,y_inches), dpi = dpi, constrained_layout = True)\n\nWith this example you are able to set figure dimensions in inches or in millimetres. When setting constrained_layout to True, plots fill your figure without borders.", "answer_comment": [], "answer_score": "4", "answer_code_list": ["x_inches = 150*(1/25.4)     # [mm]*constant\ny_inches = x_inches*(0.8)\ndpi = 96\n\nfig = plt.figure(1, figsize = (x_inches,y_inches), dpi = dpi, constrained_layout = True)\n"], "is_accepted": false}, {"answer_content": "TL;DR: Change dpi\nThis is especially useful if you want to scale a figure without changing the size of every element in it. There are two ways one can set dpi: (a) pass it in a figure constructor via dpi= parameter, or (b) call to set_dpi on the figure instance. The following shows how to set dpi=50.\ndata = [3, 5, 1, 7, 6, 7, 2]\n\n# case 1a\nplt.figure(dpi=50)\nplt.plot(data)\n\n# case 1b\nfig, ax = plt.subplots(dpi=50)\nax.plot(data)\n\n# case #2\nplt.plot(data)\nplt.gcf().set_dpi(50)\n\nThe following image shows how dpi affects figure size. Note that figsize is the same for both figures.\n\nIf your plot is generated by a third party library such as pandas or seaborn, then you can access the figure instance using .figure on the Axes object and change its dpi.\n# pandas example\ns = pd.Series([3, 5, 1, 7, 6, 7, 2])\nax = s.plot()\nax.figure.set_dpi(72)   # <--- change dpi via Axes\n\n# seaborn example\nax = sns.lineplot(s)\nax.figure.set_dpi(72)   # <--- change dpi via Axes\n\nHow does it work?\nThe size of every matplotlib element is determined by the interaction of three properties:\n\nSize in inches: Get current size via: fig.get_size_inches() and change it via fig.set_size_inches(). The default size is (6.4, 4.8).\ndpi (dots/pixels per inch): Get current dpi via: fig.get_dpi() and change it via fig.set_dpi(). The default dpi is 100. A figure using the default settings is drawn using 307,200 pixels(=6.4x100x4.8x100). By changing the number of pixels, we can change the size of the figure (and everything drawn on it such as lines, markers, ticklabels, borders, labels, titles etc.).\nppi (points per inch): This is fixed at ppi=72. A point is the unit of matplotlib element size (linewidth, markersize, fontsize etc.). For example, a line with lw=1 is 1/72 inch wide, a letter with fontsize=10 is 10/72 inch tall etc. If dpi=100, lw=1 line is 100/72 pixels wide, a letter with fontsize=10 is 1000/72 pixels tall etc.\n\nSuppose we have a figure with figsize=(4,2) and dpi=100. If we decrease the figwidth 4->2, then that change in pixels is 400->200. However, since ppi is constant, the size of everything on the plot stays the same, i.e. lw=1 line will still be 1/72\" (100/72 pixels) wide even though the figure its drawn on is 200 pixels wide now. Visually, everything on a plot will look bigger/thicker relative to the figure size.\nOn the other hand, if we decrease dpi, everything becomes smaller proportionally. If we decrease dpi from 100 to 50, then the figwidth changes from 400 pixels to 200 pixels, lw=1 line changes from 100/72 pixels to 50/72 pixels wide, etc., in other words, the size of every element in pixels is halved.\n\n\nCode used to produce the above figures:\nfor figsize, dpi in [((4,2), 100), ((4,2), 50), ((2,1), 100)]:\n    plt.figure(figsize=figsize, dpi=dpi)\n    plt.plot([3,5,1,7,6,7,2])\n    plt.title(f\"figsize={figsize}, dpi={dpi}\")", "answer_comment": [], "answer_score": "2", "answer_code_list": ["data = [3, 5, 1, 7, 6, 7, 2]\n\n# case 1a\nplt.figure(dpi=50)\nplt.plot(data)\n\n# case 1b\nfig, ax = plt.subplots(dpi=50)\nax.plot(data)\n\n# case #2\nplt.plot(data)\nplt.gcf().set_dpi(50)\n", "# pandas example\ns = pd.Series([3, 5, 1, 7, 6, 7, 2])\nax = s.plot()\nax.figure.set_dpi(72)   # <--- change dpi via Axes\n\n# seaborn example\nax = sns.lineplot(s)\nax.figure.set_dpi(72)   # <--- change dpi via Axes\n", "for figsize, dpi in [((4,2), 100), ((4,2), 50), ((2,1), 100)]:\n    plt.figure(figsize=figsize, dpi=dpi)\n    plt.plot([3,5,1,7,6,7,2])\n    plt.title(f\"figsize={figsize}, dpi={dpi}\")\n"], "is_accepted": false}, {"answer_content": "You can also set the default size of figures in a custom style sheet used with matplotlib.style.use. In your .mplstyle file, include a line setting rcParams['figure.figsize']:\nfigure.figsize : 8, 6\n\nThe space between the numbers is optional, and you can use integers or floating-point.\nThen, call use before creating the plot, ex. if your style file is my_style_file.mplstyle in the same directory:\nmatplotlib.style.use('my_style_file.mplstyle')\n\nThe numbers in the style file (8 and 6 in my example) are equivalent to the numbers you'd supply in the figsize argument: plt.figure(... figsize = (8,6) ...), but the behavior will be similar to setting rcParams['figure.figsize'] at the beginnining of the file, i.e., every new figure will be that size without needing to specify the size in every new figure.", "answer_comment": [], "answer_score": "1", "answer_code_list": ["figure.figsize : 8, 6\n", "matplotlib.style.use('my_style_file.mplstyle')\n"], "is_accepted": false}], "views": "6.2m", "title": "How do I change the size of figures drawn with Matplotlib?", "question_link": "https://stackoverflow.com/questions/332289/how-do-i-change-the-size-of-figures-drawn-with-matplotlib", "question_content": "How do I change the size of figure drawn with Matplotlib?", "question_comment": ["These questions are similar and may be of interest Specify figure size in centimeter in matplotlib and Specifying and saving a figure with exact size in pixels"]}]