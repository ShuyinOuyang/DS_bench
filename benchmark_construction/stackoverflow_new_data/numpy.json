[{"votes": "909", "answers": [{"answer_content": "Use numpy.set_printoptions:\nimport sys\nimport numpy\nnumpy.set_printoptions(threshold=sys.maxsize)", "answer_comment": ["if you only want to print a numpy array only once, unfortunately this solution has the downside of requiring you to reset this configuration change after doing the print.", "@TrevorBoydSmith, Do you know how to reset this parameter after the print?", "@ColinMac see stackoverflow.com/a/24542498/52074 where he saves the settings. does an operation. then restores the settings.", "And how to reset it back to normal?", "@Gulzar use: numpy.set_printoptions(threshold = False)"], "answer_score": "992", "answer_code_list": ["import sys\nimport numpy\nnumpy.set_printoptions(threshold=sys.maxsize)\n"], "is_accepted": true}, {"answer_content": "import numpy as np\nnp.set_printoptions(threshold=np.inf)\n\nI suggest using np.inf instead of np.nan which is suggested by others. They both work for your purpose, but by setting the threshold to \"infinity\" it is obvious to everybody reading your code what you mean. Having a threshold of \"not a number\" seems a little vague to me.", "answer_comment": ["What's the inverse operation of this? How to go back to the previous setting (with the dots)?", "@Karlo The default number is 1000, so np.set_printoptions(threshold=1000) will revert it to default behaviour. But you can set this threshold as low or high as you like. np.set_printoptions(threshold=np.inf) simply changes the maximum size a printed array can be before it is truncated to infinite, so that it is never truncated no matter how big. If you set the threshold to any real number then that will be the maximum size.", "Not only is this clearer, it's much less fragile. There is no special handling for np.inf, np.nan, or 'nan'. Whatever you put there, NumPy will still use a plain > to compare the size of the array to your threshold. np.nan only happens to work because it's a.size > _summaryThreshold instead of a.size <= _summaryThreshold, and np.nan returns False for all >/</>=/<= comparisons. 'nan' only happens to work due to fragile implementation details of Python 2's mixed-type comparison logic; it breaks completely on Python 3.", "Use sys.maxsize since the value is documented to be an int", "To properly answer @Karlo's question, note that the initial value for the print options threshold is found in np.get_printoptions()['threshold']. You can store this value before setting the threshold and then restore it afterwards (or use a with block as suggested in other answers)."], "answer_score": "321", "answer_code_list": ["import numpy as np\nnp.set_printoptions(threshold=np.inf)\n"], "is_accepted": false}, {"answer_content": "Temporary setting\nYou can use the printoptions context manager:\nwith numpy.printoptions(threshold=numpy.inf):\n    print(arr)\n\n(of course, replace numpy by np if that's how you imported numpy)\nThe use of a context manager (the with-block) ensures that after the context manager is finished, the print options will revert to whatever they were before the block started.  It ensures the setting is temporary, and only applied to code within the block.\nSee numpy.printoptions documentation for details on the context manager and what other arguments it supports.  It was introduced in NumPy 1.15 (released 2018-07-23).", "answer_comment": ["Best one-off solution for preserving the row/column orientation that converting to list destroys."], "answer_score": "256", "answer_code_list": ["with numpy.printoptions(threshold=numpy.inf):\n    print(arr)\n"], "is_accepted": false}, {"answer_content": "The previous answers are the correct ones, but as a weaker alternative you can transform into a list:\n>>> numpy.arange(100).reshape(25,4).tolist()\n\n[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21,\n22, 23], [24, 25, 26, 27], [28, 29, 30, 31], [32, 33, 34, 35], [36, 37, 38, 39], [40, 41,\n42, 43], [44, 45, 46, 47], [48, 49, 50, 51], [52, 53, 54, 55], [56, 57, 58, 59], [60, 61,\n62, 63], [64, 65, 66, 67], [68, 69, 70, 71], [72, 73, 74, 75], [76, 77, 78, 79], [80, 81,\n82, 83], [84, 85, 86, 87], [88, 89, 90, 91], [92, 93, 94, 95], [96, 97, 98, 99]]", "answer_comment": ["This seems to be the best one-off way to see your full array in a print statement.", "@AaronBramson i agree... this is less-error prone when you need just one print statement (one line of code as opposed to 3 lines for: change config, print, reset config).", "I like that this prints the comma separators", "This solution is great for integers but less great for doubles"], "answer_score": "179", "answer_code_list": [">>> numpy.arange(100).reshape(25,4).tolist()\n\n[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21,\n22, 23], [24, 25, 26, 27], [28, 29, 30, 31], [32, 33, 34, 35], [36, 37, 38, 39], [40, 41,\n42, 43], [44, 45, 46, 47], [48, 49, 50, 51], [52, 53, 54, 55], [56, 57, 58, 59], [60, 61,\n62, 63], [64, 65, 66, 67], [68, 69, 70, 71], [72, 73, 74, 75], [76, 77, 78, 79], [80, 81,\n82, 83], [84, 85, 86, 87], [88, 89, 90, 91], [92, 93, 94, 95], [96, 97, 98, 99]]\n"], "is_accepted": false}, {"answer_content": "Here is a one-off way to do this, which is useful if you don't want to change your default settings:\ndef fullprint(*args, **kwargs):\n  from pprint import pprint\n  import numpy\n  opt = numpy.get_printoptions()\n  numpy.set_printoptions(threshold=numpy.inf)\n  pprint(*args, **kwargs)\n  numpy.set_printoptions(**opt)", "answer_comment": ["Looks like this would be a good place to use a context manager, so you can say \"with fullprint\"."], "answer_score": "51", "answer_code_list": ["def fullprint(*args, **kwargs):\n  from pprint import pprint\n  import numpy\n  opt = numpy.get_printoptions()\n  numpy.set_printoptions(threshold=numpy.inf)\n  pprint(*args, **kwargs)\n  numpy.set_printoptions(**opt)\n"], "is_accepted": false}, {"answer_content": "This sounds like you're using numpy.\nIf that's the case, you can add:\nimport numpy as np\nimport sys\nnp.set_printoptions(threshold=sys.maxsize)\n\nThat will disable the corner printing.  For more information, see this NumPy Tutorial.", "answer_comment": ["ValueError: threshold must be numeric and non-NAN, try sys.maxsize for untruncated representation", "Yes, That part of the official Numpy tutorial is wrong"], "answer_score": "49", "answer_code_list": ["import numpy as np\nimport sys\nnp.set_printoptions(threshold=sys.maxsize)\n"], "is_accepted": false}, {"answer_content": "Using a context manager as Paul Price sugggested\nimport numpy as np\n\n\nclass fullprint:\n    'context manager for printing full numpy arrays'\n\n    def __init__(self, **kwargs):\n        kwargs.setdefault('threshold', np.inf)\n        self.opt = kwargs\n\n    def __enter__(self):\n        self._opt = np.get_printoptions()\n        np.set_printoptions(**self.opt)\n\n    def __exit__(self, type, value, traceback):\n        np.set_printoptions(**self._opt)\n\n\nif __name__ == '__main__': \n    a = np.arange(1001)\n\n    with fullprint():\n        print(a)\n\n    print(a)\n\n    with fullprint(threshold=None, edgeitems=10):\n        print(a)", "answer_comment": ["This context manager is built into numpy 1.15, thanks to github.com/numpy/numpy/pull/10406, under the name np.printoptions"], "answer_score": "36", "answer_code_list": ["import numpy as np\n\n\nclass fullprint:\n    'context manager for printing full numpy arrays'\n\n    def __init__(self, **kwargs):\n        kwargs.setdefault('threshold', np.inf)\n        self.opt = kwargs\n\n    def __enter__(self):\n        self._opt = np.get_printoptions()\n        np.set_printoptions(**self.opt)\n\n    def __exit__(self, type, value, traceback):\n        np.set_printoptions(**self._opt)\n\n\nif __name__ == '__main__': \n    a = np.arange(1001)\n\n    with fullprint():\n        print(a)\n\n    print(a)\n\n    with fullprint(threshold=None, edgeitems=10):\n        print(a)\n"], "is_accepted": false}, {"answer_content": "numpy.savetxt\nnumpy.savetxt(sys.stdout, numpy.arange(10000))\n\nor if you need a string:\nimport StringIO\nsio = StringIO.StringIO()\nnumpy.savetxt(sio, numpy.arange(10000))\ns = sio.getvalue()\nprint s\n\nThe default output format is:\n0.000000000000000000e+00\n1.000000000000000000e+00\n2.000000000000000000e+00\n3.000000000000000000e+00\n...\n\nand it can be configured with further arguments.\nNote in particular how this also not shows the square brackets, and allows for a lot of customization, as mentioned at: How to print a Numpy array without brackets?\nTested on Python 2.7.12, numpy 1.11.1.", "answer_comment": ["minor drawback to this method is that in only works with 1d and 2d arrays", "@Fnord thanks for this info, let me know if you find a workaround!"], "answer_score": "17", "answer_code_list": ["numpy.savetxt(sys.stdout, numpy.arange(10000))\n", "import StringIO\nsio = StringIO.StringIO()\nnumpy.savetxt(sio, numpy.arange(10000))\ns = sio.getvalue()\nprint s\n", "0.000000000000000000e+00\n1.000000000000000000e+00\n2.000000000000000000e+00\n3.000000000000000000e+00\n...\n"], "is_accepted": false}, {"answer_content": "A slight modification: (since you are going to print a huge list)\nimport numpy as np\nnp.set_printoptions(threshold=np.inf, linewidth=200)\n\nx = np.arange(1000)\nprint(x)\n\nThis will increase the number of characters per line (default linewidth of 75). Use any value you like for the linewidth which suits your coding environment. This will save you from having to go through huge number of output lines by adding more characters per line.", "answer_comment": ["Thank you for a great tip. linewidth is extremely useful when you want to print a large matrix and avoid line breaks."], "answer_score": "16", "answer_code_list": ["import numpy as np\nnp.set_printoptions(threshold=np.inf, linewidth=200)\n\nx = np.arange(1000)\nprint(x)\n"], "is_accepted": false}, {"answer_content": "This is a slight modification (removed the option to pass additional arguments to set_printoptions)of neoks answer. \nIt shows how you can use contextlib.contextmanager to easily create such a contextmanager with fewer lines of code:\nimport numpy as np\nfrom contextlib import contextmanager\n\n@contextmanager\ndef show_complete_array():\n    oldoptions = np.get_printoptions()\n    np.set_printoptions(threshold=np.inf)\n    try:\n        yield\n    finally:\n        np.set_printoptions(**oldoptions)\n\nIn your code it can be used like this:\na = np.arange(1001)\n\nprint(a)      # shows the truncated array\n\nwith show_complete_array():\n    print(a)  # shows the complete array\n\nprint(a)      # shows the truncated array (again)", "answer_comment": ["You should always put a try / finally around the yield in a context manager, so that the cleanup happens no matter what.", "@Eric indeed. Thank you for your helpful comment and I have updated the answer.", "In 1.15, this can be spelt with np.printoptions(threshold=np.inf):"], "answer_score": "13", "answer_code_list": ["import numpy as np\nfrom contextlib import contextmanager\n\n@contextmanager\ndef show_complete_array():\n    oldoptions = np.get_printoptions()\n    np.set_printoptions(threshold=np.inf)\n    try:\n        yield\n    finally:\n        np.set_printoptions(**oldoptions)\n", "a = np.arange(1001)\n\nprint(a)      # shows the truncated array\n\nwith show_complete_array():\n    print(a)  # shows the complete array\n\nprint(a)      # shows the truncated array (again)\n"], "is_accepted": false}, {"answer_content": "with np.printoptions(edgeitems=50):\n    print(x)\n\nChange 50 to how many lines you wanna see\nSource: here", "answer_comment": [], "answer_score": "13", "answer_code_list": ["with np.printoptions(edgeitems=50):\n    print(x)\n"], "is_accepted": false}, {"answer_content": "Complementary to this answer from the maximum number of columns (fixed with numpy.set_printoptions(threshold=numpy.nan)), there is also a limit of characters to be displayed. In some environments like when calling python from bash (rather than the interactive session), this can be fixed by setting the parameter linewidth as following.\nimport numpy as np\nnp.set_printoptions(linewidth=2000)    # default = 75\nMat = np.arange(20000,20150).reshape(2,75)    # 150 elements (75 columns)\nprint(Mat)\n\nIn this case, your window should limit the number of characters to wrap the line.\nFor those out there using sublime text and wanting to see results within the output window, you should add the build option \"word_wrap\": false to the sublime-build file [source] .", "answer_comment": [], "answer_score": "7", "answer_code_list": ["import numpy as np\nnp.set_printoptions(linewidth=2000)    # default = 75\nMat = np.arange(20000,20150).reshape(2,75)    # 150 elements (75 columns)\nprint(Mat)\n"], "is_accepted": false}, {"answer_content": "To turn it off and return to the normal mode \nnp.set_printoptions(threshold=False)", "answer_comment": ["It works for me (Jupyter python version 3). You may try the code below.As per the official documnetation the code below should put back to the default options. Which it did for me too.  >np.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=8,         suppress=False, threshold=1000, formatter=None)", "Okay, it must be because I'm not using Jupyter. The accepted answer does work for me in a pure python environment though.", "This means threshold=0, which means \"truncate as soon as possible\" - not what you want at all."], "answer_score": "7", "answer_code_list": ["np.set_printoptions(threshold=False)\n"], "is_accepted": false}, {"answer_content": "Since NumPy version 1.16, for more details see GitHub ticket 12251.\nfrom sys import maxsize\nfrom numpy import set_printoptions\n\nset_printoptions(threshold=maxsize)", "answer_comment": [], "answer_score": "6", "answer_code_list": ["from sys import maxsize\nfrom numpy import set_printoptions\n\nset_printoptions(threshold=maxsize)\n"], "is_accepted": false}, {"answer_content": "Suppose you have a numpy array\n arr = numpy.arange(10000).reshape(250,40)\n\nIf you want to print the full array in a one-off way (without toggling np.set_printoptions), but want something simpler (less code) than the context manager, just do\nfor row in arr:\n     print row", "answer_comment": [], "answer_score": "3", "answer_code_list": [" arr = numpy.arange(10000).reshape(250,40)\n", "for row in arr:\n     print row \n"], "is_accepted": false}, {"answer_content": "If you're using a jupyter notebook, I found this to be the simplest solution for one off cases. Basically convert the numpy array to a list and then to a string and then print. This has the benefit of keeping the comma separators in the array, whereas using numpyp.printoptions(threshold=np.inf) does not:\nimport numpy as np\nprint(str(np.arange(10000).reshape(250,40).tolist()))", "answer_comment": [], "answer_score": "3", "answer_code_list": ["import numpy as np\nprint(str(np.arange(10000).reshape(250,40).tolist()))\n"], "is_accepted": false}, {"answer_content": "This is the hackiest solution it even prints it nicely as numpy does:\nimport numpy as np\n\na = np.arange(10000).reshape(250,40)\n\nb = [str(row) for row in a.tolist()]\n\nprint('\\n'.join(b))\n\nOut:", "answer_comment": [], "answer_score": "3", "answer_code_list": ["import numpy as np\n\na = np.arange(10000).reshape(250,40)\n\nb = [str(row) for row in a.tolist()]\n\nprint('\\n'.join(b))\n"], "is_accepted": false}, {"answer_content": "matrepr will print the entire array with disabled max_rows and max_cols limits:\nfrom matrepr import mprint\n\na = numpy.arange(10000).reshape(250,40)\n\nmprint(a, max_rows=None, max_cols=None)\n\nFirst few lines of the result:\n<250\u00d740, 10000 'int64' elements, array>\n       0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39\n    \u250c                                                                                                                                                                                                                                                \u2510\n  0 \u2502  0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39  \u2502\n  1 \u2502  40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64    65    66    67    68    69    70    71    72    73    74    75    76    77    78    79  \u2502\n  2 \u2502  80    81    82    83    84    85    86    87    88    89    90    91    92    93    94    95    96    97    98    99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119  \u2502\n  3 \u2502 120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159  \u2502\n  4 \u2502 160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199  \u2502\n  5 \u2502 200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239  \u2502\n  6 \u2502 240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279  \u2502\n  7 \u2502 280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319  \u2502\n  8 \u2502 320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359  \u2502\n  9 \u2502 360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399  \u2502\n 10 \u2502 400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439  \u2502\n 11 \u2502 440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479  \u2502", "answer_comment": ["Very cool did you write it?", "@SashSinha yes."], "answer_score": "3", "answer_code_list": ["from matrepr import mprint\n\na = numpy.arange(10000).reshape(250,40)\n\nmprint(a, max_rows=None, max_cols=None)\n", "<250\u00d740, 10000 'int64' elements, array>\n       0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39\n    \u250c                                                                                                                                                                                                                                                \u2510\n  0 \u2502  0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39  \u2502\n  1 \u2502  40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64    65    66    67    68    69    70    71    72    73    74    75    76    77    78    79  \u2502\n  2 \u2502  80    81    82    83    84    85    86    87    88    89    90    91    92    93    94    95    96    97    98    99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119  \u2502\n  3 \u2502 120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159  \u2502\n  4 \u2502 160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199  \u2502\n  5 \u2502 200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239  \u2502\n  6 \u2502 240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279  \u2502\n  7 \u2502 280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319  \u2502\n  8 \u2502 320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359  \u2502\n  9 \u2502 360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399  \u2502\n 10 \u2502 400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439  \u2502\n 11 \u2502 440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479  \u2502\n"], "is_accepted": false}, {"answer_content": "You can use the array2string function - docs.\na = numpy.arange(10000).reshape(250,40)\nprint(numpy.array2string(a, threshold=numpy.nan, max_line_width=numpy.nan))\n# [Big output]", "answer_comment": ["ValueError: threshold must be numeric and non-NAN, try sys.maxsize for untruncated representation"], "answer_score": "2", "answer_code_list": ["a = numpy.arange(10000).reshape(250,40)\nprint(numpy.array2string(a, threshold=numpy.nan, max_line_width=numpy.nan))\n# [Big output]\n"], "is_accepted": false}, {"answer_content": "You won't always want all items printed, especially for large arrays. \nA simple way to show more items:\nIn [349]: ar\nOut[349]: array([1, 1, 1, ..., 0, 0, 0])\n\nIn [350]: ar[:100]\nOut[350]:\narray([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,\n       1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1])\n\nIt works fine when sliced array < 1000 by default.", "answer_comment": [], "answer_score": "2", "answer_code_list": ["In [349]: ar\nOut[349]: array([1, 1, 1, ..., 0, 0, 0])\n\nIn [350]: ar[:100]\nOut[350]:\narray([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,\n       1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1])\n"], "is_accepted": false}, {"answer_content": "If you are using Jupyter, try the variable inspector extension. You can click each variable to see the entire array.", "answer_comment": [], "answer_score": "2", "answer_code_list": [], "is_accepted": false}, {"answer_content": "If an array is too large to be printed, NumPy automatically skips the central part of the array and only prints the corners:\nTo disable this behaviour and force NumPy to print the entire array, you can change the printing options using set_printoptions.\n>>> np.set_printoptions(threshold='nan')\n\nor\n>>> np.set_printoptions(edgeitems=3,infstr='inf',\n... linewidth=75, nanstr='nan', precision=8,\n... suppress=False, threshold=1000, formatter=None)\n\nYou can also refer to the numpy documentation numpy documentation for \"or part\" for more help.", "answer_comment": ["Do not use 'nan', np.nan, or any of the above. It's unsupported, and this bad advice is causing pain for people transitioning to python 3", "ValueError: threshold must be numeric and non-NAN, try sys.maxsize for untruncated representation"], "answer_score": "1", "answer_code_list": [">>> np.set_printoptions(threshold='nan')\n", ">>> np.set_printoptions(edgeitems=3,infstr='inf',\n... linewidth=75, nanstr='nan', precision=8,\n... suppress=False, threshold=1000, formatter=None)\n"], "is_accepted": false}, {"answer_content": "If you have pandas available,\n    numpy.arange(10000).reshape(250,40)\n    print(pandas.DataFrame(a).to_string(header=False, index=False))\n\navoids the side effect of requiring a reset of numpy.set_printoptions(threshold=sys.maxsize) and you don't get the numpy.array and brackets. I find this convenient for dumping a wide array into a log file", "answer_comment": [], "answer_score": "0", "answer_code_list": ["    numpy.arange(10000).reshape(250,40)\n    print(pandas.DataFrame(a).to_string(header=False, index=False))\n"], "is_accepted": false}], "views": "1.2m", "title": "How do I print the full NumPy array, without truncation?", "question_link": "https://stackoverflow.com/questions/1987694/how-do-i-print-the-full-numpy-array-without-truncation", "question_content": "When I print a numpy array, I get a truncated representation, but I want the full array.\n>>> numpy.arange(10000)\narray([   0,    1,    2, ..., 9997, 9998, 9999])\n\n>>> numpy.arange(10000).reshape(250,40)\narray([[   0,    1,    2, ...,   37,   38,   39],\n       [  40,   41,   42, ...,   77,   78,   79],\n       [  80,   81,   82, ...,  117,  118,  119],\n       ..., \n       [9880, 9881, 9882, ..., 9917, 9918, 9919],\n       [9920, 9921, 9922, ..., 9957, 9958, 9959],\n       [9960, 9961, 9962, ..., 9997, 9998, 9999]])", "question_comment": ["Is there a way to do it on a \"one off\" basis?  That is, to print out the full output once, but not at other times in the script?", "@Matt O'Brien see ZSG's answer below", "Could you change the accepted answer to the one recommending np.inf? np.nan and 'nan' only work by total fluke, and 'nan' doesn't even work in Python 3 because they changed the mixed-type comparison implementation that threshold='nan' depended on.", "(threshold=np.nan rather than 'nan' depends on a different fluke, which is that the array printing logic compares the array size to the threshold with a.size > _summaryThreshold. This always returns False for _summaryThreshold=np.nan. If the comparison had been a.size <= _summaryThreshold, testing whether the array should be fully printed instead of testing whether it should be summarized, this threshold would trigger summarization for all arrays.)", "A \"one-off\" way of doing it:  If you have a numpy.array tmp just list(tmp).  Other options with different formatting are tmp.tolist() or for more control print(\"\\n\".join(str(x) for x in tmp))."]}]